
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокФорматов = Элементы.ВариантЗагрузки.СписокВыбора;
	СписокФорматов.Добавить(1, "РАЙФФАЙЗЕНБАНК");
	СписокФорматов.Добавить(2, "АЛЬФАБАНК");
	СписокФорматов.Добавить(3, "СБЕРБАНК");
	СписокФорматов.Добавить(4, "ПРОМСВЯЗЬБАНК");
	СписокФорматов.Добавить(5, "ПСБ ФАКТОРИНГ");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, НомерСтроки, НомерКолонки, ТипЗначения = "Строка")
	
	ОбластьДокумента = ТабличныйДокумент.ПолучитьОбласть(НомерСтроки, НомерКолонки);
	ЗначениеОбласти = ОбластьДокумента.ТекущаяОбласть.Текст;
	
	Если ТипЗначения = "Число" Тогда
		ЗначениеОбласти = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеОбласти);
	ИначеЕсли ТипЗначения = "Дата" Тогда
		ЗначениеОбласти = ПолучитьФорматДаты(ЗначениеОбласти);
	Иначе
		ЗначениеОбласти = СокрЛП(ЗначениеОбласти);
	КонецЕсли;
	
	Возврат ЗначениеОбласти;
	
КонецФункции

&НаСервере
Функция ПрочитатьТабличныйДокумент(АдресФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДанныеФайла.Записать(ИмяВременногоФайла);
	
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка чтения файла загрузки: %1'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ФайлФинансирование");
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		Возврат Истина;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.ПлатежныеПозицииПеречислениеОстатков.Очистить();
	Объект.ПлатежныеПозицииФинансирование.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФакторПриИзменении(Элемент)
	
	Объект.ПлатежныеПозицииПеречислениеОстатков.Очистить();
	Объект.ПлатежныеПозицииФинансирование.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Для Каждого Стр Из Объект.ДокументыОплаты Цикл
		Стр.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыбор(Команда)
	
	Для Каждого Стр Из Объект.ДокументыОплаты Цикл
		Стр.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлФинансированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файл протокола обмена (*.xls*)|*.xls*'"));
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(
		ЭтотОбъект, "ФайлФинансирование", СтандартнаяОбработка, НастройкиДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОстаткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файл протокола обмена (*.xls*)|*.xls*'"));
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(
		ЭтотОбъект, "ФайлОстатки", СтандартнаяОбработка, НастройкиДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФинансирование(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлФинансирование) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите путь к файлу!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ФайлФинансирование");
		Возврат;
	КонецЕсли;
	
	Вариант = Объект.ВариантЗагрузки;
	Если Вариант = 1 Тогда
		ПрочитатьЛистExcel_Финансирование_Райффайзен();
		ЗагрузитьФинансированиеНаСервере();
	ИначеЕсли Вариант = 2 Тогда
		ПрочитатьЛистExcel_Финансирование_Альфа();
		ЗагрузитьФинансированиеНаСервере();
	ИначеЕсли Вариант = 3 Тогда
		ПрочитатьЛистExcel_Финансирование_Сбербанк();
		ЗагрузитьФинансированиеНаСервере();
	ИначеЕсли Вариант = 4 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаНаСервер", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, , ФайлФинансирование, Ложь, УникальныйИдентификатор);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаНаСервер", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, , ФайлФинансирование, Ложь, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиФайлаНаСервер(Результат, АдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не ПрочитатьТабличныйДокумент(АдресФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Вариант = Объект.ВариантЗагрузки;
	Если Вариант = 1 Тогда
		ПрочитатьЛистExcel_Финансирование_Райффайзен();
	ИначеЕсли Вариант = 2 Тогда
		ПрочитатьЛистExcel_Финансирование_Альфа();
	ИначеЕсли Вариант = 3 Тогда
		ПрочитатьЛистExcel_Финансирование_Сбербанк();
	ИначеЕсли Вариант = 4 Тогда
		ПрочитатьЛистExcel_Финансирование_ПромСвязьБанк();
	Иначе
		ПрочитатьЛистExcel_Финансирование_ПСБФакторинг();
	КонецЕсли;
	
	ЗагрузитьФинансированиеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛистExcel_Финансирование_ПромСвязьБанк()
	
	ПерваяСтрока = 12;
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	Объект.ПлатежныеПозицииФинансирование.Очистить();
	
	Для ТекущаяСтрока = ПерваяСтрока По КоличествоСтрок Цикл
		СуммаФинансирования = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 12, "Число");
		Если Не ЗначениеЗаполнено(СуммаФинансирования) Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим дату платежа
		ДатаПлатежа = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 16);
		Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
			ДатаПлатежа = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 11);
		КонецЕсли;
		
		ДатаПлатежа = ПолучитьФорматДаты(ДатаПлатежа);
		Если Год(ДатаПлатежа) < 2000 Тогда
			ДатаПлатежа = ДобавитьМесяц(ДатаПлатежа, 2000*12);
		КонецЕсли;
		
		// Получим дату поставки
		ДатаПоставки = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 4);
		Если Не ЗначениеЗаполнено(ДатаПоставки) Тогда
			ДатаПоставки = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 7);
		КонецЕсли;
		
		ДатаПоставки = ПолучитьФорматДаты(ДатаПоставки);
		
		// Получим номер поставки
		НомерПоставки = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 3);
		
		НоваяСтрока = Объект.ПлатежныеПозицииФинансирование.Добавить();
		НоваяСтрока.ДатаПлатежа = ДатаПлатежа;
		НоваяСтрока.ДатаПоставки = ДатаПоставки;
		НоваяСтрока.НомерПоставки = НомерПоставки;
		НоваяСтрока.Сумма = СуммаФинансирования;
		НоваяСтрока.СуммаПП = СуммаФинансирования;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЛистExcel_Финансирование_ПСБФакторинг()
	
	ПерваяСтрока = 12;
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	Объект.ПлатежныеПозицииФинансирование.Очистить();
	
	Для ТекущаяСтрока = ПерваяСтрока По КоличествоСтрок Цикл
		// Получим дату поставки
		ДатаПоставки = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 3, "Дата");
		Если Не ЗначениеЗаполнено(ДатаПоставки) Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим сумму финансирования
		СуммаФинансирования = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 8, "Число");
		Если Не ЗначениеЗаполнено(СуммаФинансирования) Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим дату платежа
		ДатаПлатежа = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 9, "Дата");
		
		// Получим номер поставки
		НомерПоставки = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 4);
		
		// Получим дебитора
		Дебитор = ПолучитьЗначениеИзТабличногоДокумента(ТабличныйДокумент, ТекущаяСтрока, 5);
		
		НоваяСтрока = Объект.ПлатежныеПозицииФинансирование.Добавить();
		НоваяСтрока.ДатаПлатежа = ДатаПлатежа;
		НоваяСтрока.ДатаПоставки = ДатаПоставки;
		НоваяСтрока.НомерПоставки = НомерПоставки;
		НоваяСтрока.Сумма = СуммаФинансирования;
		НоваяСтрока.СуммаПП = СуммаФинансирования;
		НоваяСтрока.Дебитор = Дебитор;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛистExcel_Финансирование_Сбербанк()
	
	Если Не ЗначениеЗаполнено(ФайлФинансирование) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите путь к файлу!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ФайлФинансирование");
		Возврат;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ФайлФинансирование);
		Состояние("Обработка файла Microsoft Excel...");
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка     	
		Excel.Sheets(1).Select();  // лист 1, по умолчанию  
	Исключение
		Excel.ActiveWorkbook.Close(); 	
		Excel = 0;
		Сообщить("Файл "+Строка(Объект.ФайлЗагрузки)+" не соответствует необходимому формату! Первый лист не найден!");		
		Возврат;
	КонецПопытки;	
	
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;   
	Конецесли;	
	
	Сч = 3;		
	Объект.ПлатежныеПозицииФинансирование.Очистить();	
	
	Пока Сч<=ФайлСтрок Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 10).Value),Символы.НПП,""))) Тогда
			НоваяСтр = Объект.ПлатежныеПозицииФинансирование.Добавить();
		Иначе
			Сч=Сч+1;
			Продолжить;
		КонецЕсли;
		
		
		НоваяСтр.ДатаПлатежа = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 15).Value),Символы.НПП,""));  //11
		НоваяСтр.НомерПлатежа = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 16).Value),Символы.НПП,"")); //12
		
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПлатежа) Тогда
			НоваяСтр.ДатаПлатежа = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 11).Value),Символы.НПП,"")));	
		КонецЕсли;
		Если Год(НоваяСтр.ДатаПлатежа) < 2000 Тогда
			НоваяСтр.ДатаПлатежа = ДобавитьМесяц(НоваяСтр.ДатаПлатежа ,2000*12);
		КонецЕсли;
		
		НоваяСтр.НомерПоставки = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 10).Value),Символы.НПП,"")); //6
		НоваяСтр.ДатаПоставки =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 11).Value),Символы.НПП,"")); //7
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПоставки) Тогда
			НоваяСтр.ДатаПоставки = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 7).Value),Символы.НПП,"")));	
		КонецЕсли;
		НоваяСтр.Сумма =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 14).Value),Символы.НПП,""));   //10
		НоваяСтр.СуммаПП =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 14).Value),Символы.НПП,"")); //10
		
		Сч=Сч+1;
	КонецЦикла;	
	Excel.ActiveWorkbook.Close(); 	
	Excel = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛистExcel_Финансирование_Райффайзен()
	
	Если Не ЗначениеЗаполнено(ФайлФинансирование) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите путь к файлу!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ФайлФинансирование");
		Возврат;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ФайлФинансирование);
		Состояние("Обработка файла Microsoft Excel...");
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка     	
		Excel.Sheets(1).Select();  // лист 1, по умолчанию  
	Исключение
		Excel.ActiveWorkbook.Close(); 	
		Excel = 0;
		Сообщить("Файл "+Строка(Объект.ФайлЗагрузки)+" не соответствует необходимому формату! Первый лист не найден!");		
		Возврат;
	КонецПопытки;	
	
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;   
	Конецесли;	
	
	Сч = 12;		
	Объект.ПлатежныеПозицииФинансирование.Очистить();	
	
	Пока Сч<=ФайлСтрок Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 7).Value),Символы.НПП,""))) Тогда
			НоваяСтр = Объект.ПлатежныеПозицииФинансирование.Добавить();
		Иначе
			Сч=Сч+1;
			Продолжить;
		КонецЕсли;
		
		
		НоваяСтр.ДатаПлатежа = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 16).Value),Символы.НПП,""));
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПлатежа) Тогда
			НоваяСтр.ДатаПлатежа = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 16).Value),Символы.НПП,"")));	
		КонецЕсли;
		Если Год(НоваяСтр.ДатаПлатежа) < 2000 Тогда
			НоваяСтр.ДатаПлатежа = ДобавитьМесяц(НоваяСтр.ДатаПлатежа ,2000*12);
		КонецЕсли;
		
		НоваяСтр.НомерПоставки = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 7).Value),Символы.НПП,""));
		НоваяСтр.ДатаПоставки =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 8).Value),Символы.НПП,""));
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПоставки) Тогда
			НоваяСтр.ДатаПоставки = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 8).Value),Символы.НПП,"")));	
		КонецЕсли;
		НоваяСтр.Сумма =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 15).Value),Символы.НПП,""));
		НоваяСтр.СуммаПП =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 19).Value),Символы.НПП,""));
		
		Сч=Сч+1;
	КонецЦикла;	
	
	Excel.ActiveWorkbook.Close(); 	
	Excel = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛистExcel_Финансирование_Альфа()
	
	Если Не ЗначениеЗаполнено(ФайлФинансирование) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите путь к файлу!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ФайлФинансирование");
		Возврат;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ФайлФинансирование);
		Состояние("Обработка файла Microsoft Excel...");
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка     	
		Excel.Sheets(1).Select();  // лист 1, по умолчанию  
	Исключение
		Excel.ActiveWorkbook.Close(); 	
		Excel = 0;
		Сообщить("Файл "+Строка(Объект.ФайлЗагрузки)+" не соответствует необходимому формату! Первый лист не найден!");		
		Возврат;
	КонецПопытки;	
	
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;   
	Конецесли;	
	
	Сч = 5;		
	Объект.ПлатежныеПозицииФинансирование.Очистить();	
	
	Пока Сч<=ФайлСтрок Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 2).Value),Символы.НПП,""))) Тогда
			НоваяСтр = Объект.ПлатежныеПозицииФинансирование.Добавить();
		Иначе
			Сч=Сч+1;
			Продолжить;
		КонецЕсли;
		
		
		НоваяСтр.ДатаПлатежа = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 7).Value),Символы.НПП,""));
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПлатежа) Тогда
			НоваяСтр.ДатаПлатежа = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 7).Value),Символы.НПП,"")));	
		КонецЕсли;
		Если Год(НоваяСтр.ДатаПлатежа) < 2000 Тогда
			НоваяСтр.ДатаПлатежа = ДобавитьМесяц(НоваяСтр.ДатаПлатежа ,2000*12);
		КонецЕсли;
		НоваяСтр.НомерПоставки = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 2).Value),Символы.НПП,""));
		НоваяСтр.ДатаПоставки =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 1).Value),Символы.НПП,""));
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПоставки) Тогда
			НоваяСтр.ДатаПоставки = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 1).Value),Символы.НПП,"")));	
		КонецЕсли;
		НоваяСтр.Сумма =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 6).Value),Символы.НПП,""));
		
		Сч=Сч+1;
	КонецЦикла;	
	
	Excel.ActiveWorkbook.Close(); 	
	Excel = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛистExcel_Остатки_Райффайзен()
	
	Если Не ЗначениеЗаполнено(ФайлОстатки) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите путь к файлу!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ФайлОстатки");
		Возврат;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ФайлОстатки);
		Состояние("Обработка файла Microsoft Excel...");
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка     	
		Excel.Sheets(1).Select();  // лист 1, по умолчанию  
	Исключение
		Excel.ActiveWorkbook.Close(); 	
		Excel = 0;
		Сообщить("Файл "+Строка(Объект.ФайлЗагрузки)+" не соответствует необходимому формату! Первый лист не найден!");		
		Возврат;
	КонецПопытки;	
	
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;   
	Конецесли;	
	
	Сч = 11;		
	Объект.ПлатежныеПозицииПеречислениеОстатков.Очистить();	
	
	Пока Сч<=ФайлСтрок Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 13).Value),Символы.НПП,""))) Тогда
			НоваяСтр = Объект.ПлатежныеПозицииПеречислениеОстатков.Добавить();
		Иначе
			Сч=Сч+1;
			Продолжить;
		КонецЕсли;
		
		
		НоваяСтр.ДатаПлатежа = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 23).Value),Символы.НПП,""));
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПлатежа) Тогда
			НоваяСтр.ДатаПлатежа = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 23).Value),Символы.НПП,"")));	
		КонецЕсли;
		Если Год(НоваяСтр.ДатаПлатежа) < 2000 Тогда
			НоваяСтр.ДатаПлатежа = ДобавитьМесяц(НоваяСтр.ДатаПлатежа ,2000*12);
		КонецЕсли;
		НоваяСтр.НомерПоставки = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 13).Value),Символы.НПП,""));
		
		
		НоваяСтр.ДатаПоставки =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч,14).Value),Символы.НПП,""));
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПоставки) Тогда
			НоваяСтр.ДатаПоставки = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 14).Value),Символы.НПП,"")));	
		КонецЕсли;
		НоваяСтр.Сумма =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 22).Value),Символы.НПП,""));
		НоваяСтр.СуммаПП =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 26).Value),Символы.НПП,""));

		Сч=Сч+1;
	КонецЦикла;	
	Excel.ActiveWorkbook.Close(); 	
	Excel = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛистExcel_Остатки_Альфа()
	
	Если Не ЗначениеЗаполнено(ФайлОстатки) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите путь к файлу!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ФайлОстатки");
		Возврат;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ФайлОстатки);
		Состояние("Обработка файла Microsoft Excel...");
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка     	
		Excel.Sheets(1).Select();  // лист 1, по умолчанию  
	Исключение
		Excel.ActiveWorkbook.Close(); 	
		Excel = 0;
		Сообщить("Файл "+Строка(Объект.ФайлЗагрузки)+" не соответствует необходимому формату! Первый лист не найден!");		
		Возврат;
	КонецПопытки;	
	
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;   
	Конецесли;	
	
	Сч = 5;		
	Объект.ПлатежныеПозицииПеречислениеОстатков.Очистить();	
	
	Пока Сч<=ФайлСтрок Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 2).Value),Символы.НПП,""))) Тогда
			НоваяСтр = Объект.ПлатежныеПозицииПеречислениеОстатков.Добавить();
		Иначе
			Сч=Сч+1;
			Продолжить;
		КонецЕсли;
		
		
		НоваяСтр.ДатаПлатежа = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 7).Value),Символы.НПП,""));
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПлатежа) Тогда
			НоваяСтр.ДатаПлатежа = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 7).Value),Символы.НПП,"")));	
		КонецЕсли;
		Если Год(НоваяСтр.ДатаПлатежа) < 2000 Тогда
			НоваяСтр.ДатаПлатежа = ДобавитьМесяц(НоваяСтр.ДатаПлатежа ,2000*12);
		КонецЕсли;
		НоваяСтр.НомерПоставки = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 2).Value),Символы.НПП,""));
		НомерПоставки = СтрРазделить(НоваяСтр.НомерПоставки," ",Ложь);
		НоваяСтр.НомерПоставки = НомерПоставки[0];
		
		
		НоваяСтр.ДатаПоставки =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 1).Value),Символы.НПП,""));
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПоставки) Тогда
			НоваяСтр.ДатаПоставки = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 1).Value),Символы.НПП,"")));	
		КонецЕсли;
		НоваяСтр.Сумма =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 6).Value),Символы.НПП,""));
		
		Сч=Сч+1;
	КонецЦикла;	
	Excel.ActiveWorkbook.Close(); 	
	Excel = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛистExcel_Остатки_Сбербанк()
	
	Если Не ЗначениеЗаполнено(ФайлОстатки) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите путь к файлу!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ФайлОстатки");
		Возврат;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ФайлОстатки);
		Состояние("Обработка файла Microsoft Excel...");
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка     	
		Excel.Sheets(1).Select();  // лист 1, по умолчанию  
	Исключение
		Excel.ActiveWorkbook.Close(); 	
		Excel = 0;
		Сообщить("Файл "+Строка(Объект.ФайлЗагрузки)+" не соответствует необходимому формату! Первый лист не найден!");		
		Возврат;
	КонецПопытки;	
	
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;   
	Конецесли;	
	
	Сч = 7;		
	Объект.ПлатежныеПозицииПеречислениеОстатков.Очистить();	
	
	Пока Сч<=ФайлСтрок Цикл
		Если ЗначениеЗаполнено(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 5).Value),Символы.НПП,""))) Тогда //6
			НоваяСтр = Объект.ПлатежныеПозицииПеречислениеОстатков.Добавить();
		Иначе
			Сч=Сч+1;
			Продолжить;
		КонецЕсли;
		
		
		НоваяСтр.ДатаПлатежа = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 14).Value),Символы.НПП,""));  //16
		НоваяСтр.НомерПлатежа = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 15).Value),Символы.НПП,"")); //18
		
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПлатежа) Тогда
			НоваяСтр.ДатаПлатежа = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 16).Value),Символы.НПП,"")));	
		КонецЕсли;
		Если Год(НоваяСтр.ДатаПлатежа) < 2000 Тогда
			НоваяСтр.ДатаПлатежа = ДобавитьМесяц(НоваяСтр.ДатаПлатежа ,2000*12);
		КонецЕсли;
		
		НоваяСтр.ДатаПоставки =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 4).Value),Символы.НПП,"")); //7,1
		НоваяСтр.НомерПоставки = СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 5).Value),Символы.НПП,"")); //6,2
		Если Не ЗначениеЗаполнено(НоваяСтр.ДатаПоставки) Тогда
			НоваяСтр.ДатаПоставки = ПолучитьФорматДаты(СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 1).Value),Символы.НПП,"")));	
		КонецЕсли;
		НоваяСтр.Сумма =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 13).Value),Символы.НПП,""));   //10,15
		НоваяСтр.СуммаПП =  СокрЛП(СтрЗаменить(СокрЛП(Excel.Cells(Сч, 13).Value),Символы.НПП,"")); //10,15
		
		Сч=Сч+1;
	КонецЦикла;	
	Excel.ActiveWorkbook.Close(); 	
	Excel = 0;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФорматДаты(ИсходнаяДата)
	
	// Дата в Excel хранится в виде целового числа. Проверим на дату Excel
	ОписаниеТиповДата = Новый ОписаниеТипов("Число");
	ЗначениеДата = ОписаниеТиповДата.ПривестиЗначение(ИсходнаяДата);
	
	Если ЗначениеДата > 0 Тогда
		ЗначениеДата = '18991230' + ЗначениеДата* 86400;
		Возврат ЗначениеДата;
	КонецЕсли;
	
	// Если дата хранится в виде строки, то приобразуем ее в дату
	ДатаСтрокой = НРег(ИсходнаяДата);
	ДатаСтрокой = СокрЛП(СтрЗаменить(ДатаСтрокой, "г", ""));
	ДатаСтрокой = СокрЛП(СтрЗаменить(ДатаСтрокой, ".", ""));
	
	Попытка
		Год = Прав(ДатаСтрокой, 4);
		Месяц = Сред(ДатаСтрокой,3, 2);
		День = Лев(ДатаСтрокой, 2);
		ЗначениеДата = Год + Месяц + День;
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибочный формат даты ""%1""'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ИсходнаяДата);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗначениеДата = '00010101';
	КонецПопытки;
	
	Возврат ЗначениеДата;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьФинансированиеНаСервере()
	
	Если Объект.ПлатежныеПозицииФинансирование.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем документы РТУ
	// Документов может быть много, поэтому сначала готовим таблицу документов, затем ищем по таблице
	ТаблицаРТУ = ПодготовитьТаблицуРТУ();
	Если ТаблицаРТУ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.ПлатежныеПозицииФинансирование Цикл
		Отбор = Новый Структура("НомерИзКупца", Стр.НомерПоставки);
		СтрокиРТУ = ТаблицаРТУ.НайтиСтроки(Отбор);
		
		Если СтрокиРТУ.Количество() = 0 Тогда
			Сообщить(СтрШаблон("Не найдена РТУ по номеру %1 от %2", Стр.НомерПоставки, Формат(Стр.ДатаПоставки, "ДФ=dd.MM.yyyy")));
			Стр.СтатусЗагрузки = 1;
			Продолжить;
		КонецЕсли;
		
		Если СтрокиРТУ.Количество() > 1 Тогда
			Сообщить(СтрШаблон("Найдено несколько РТУ по номеру %1 от %2", Стр.НомерПоставки, Формат(Стр.ДатаПоставки, "ДФ=dd.MM.yyyy")));
			Стр.СтатусЗагрузки = 1;
			Продолжить;
		КонецЕсли;
		
		Стр.РТУ = СтрокиРТУ[0].РТУ;	
		Стр.СчетФактура = СтрокиРТУ[0].СчетФактура;
	КонецЦикла;
	
	ТаблицаРТУ = Неопределено;
	
	// Ищем документы оплат
	Если Объект.ВариантЗагрузки = 5 Тогда
		// Заполняем Договор
		ДебиторыДоговоров = ПолучитьДебиторовДоговоровФакторинга();
		Для Каждого Стр Из Объект.ПлатежныеПозицииФинансирование Цикл
			Стр.ДоговорКонтрагента = ДебиторыДоговоров[ВРег(Стр.Дебитор)];
			Если Не ЗначениеЗаполнено(Стр.ДоговорКонтрагента) Тогда
				ШаблонОшибки = НСтр("ru = 'Не найден договор факторинга для дебитора %1'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, Стр.Дебитор);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				Стр.СтатусЗагрузки = 1;
			КонецЕсли;
		КонецЦикла;
		
		// Ищем документ оплаты для каждого документа РТУ по отдельности
		Для Каждого Стр Из Объект.ПлатежныеПозицииФинансирование Цикл
			ПоступлениеРС = НайтиПоступленияНаРСпоСуммеИДоговору(
				Стр.ДоговорКонтрагента, Стр.СуммаПП, Стр.ДатаПлатежа);
			
			Если ЗначениеЗаполнено(ПоступлениеРС) Тогда
				Стр.ПоступлениеРС = ПоступлениеРС;
				Стр.СтатусЗагрузки = 2;
			КонецЕсли;
		КонецЦикла;
		
		// Ищем один документ на один день по договору
		СтруктураОтбора = Новый Структура("СтатусЗагрузки", 0);
		ТаблицаДокументов = Объект.ПлатежныеПозицииФинансирование.Выгрузить(
			СтруктураОтбора, "ДатаПлатежа, Дебитор, ДоговорКонтрагента, СуммаПП");
		ТаблицаДокументов.Свернуть("ДатаПлатежа, Дебитор, ДоговорКонтрагента", "СуммаПП");
		
		Для Каждого СтрокаДокументов Из ТаблицаДокументов Цикл
			ПоступлениеРС = НайтиПоступленияНаРСпоСуммеИДоговору(
				СтрокаДокументов.ДоговорКонтрагента, СтрокаДокументов.СуммаПП, СтрокаДокументов.ДатаПлатежа);
				
			Если ЗначениеЗаполнено(ПоступлениеРС) Тогда
				СтруктураОтбора = Новый Структура("ДатаПлатежа, ДоговорКонтрагента");
				СтруктураОтбора.Вставить("ДатаПлатежа", СтрокаДокументов.ДатаПлатежа);
				СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрокаДокументов.ДоговорКонтрагента);
				СтруктураОтбора.Вставить("СтатусЗагрузки", 0);
				
				СтрокиТЧ = Объект.ПлатежныеПозицииФинансирование.НайтиСтроки(СтруктураОтбора);
				Для Каждого Стр Из СтрокиТЧ Цикл
					Стр.ПоступлениеРС = ПоступлениеРС;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Стр Из Объект.ПлатежныеПозицииФинансирование Цикл
			Если Объект.ПоискПоКомментариям Тогда
				Стр.ПоступлениеРС = НайтиПоступленияНаРСпоНазначениюПлатежа2(Стр.НомерПоставки, Стр.ДатаПлатежа);
			Иначе
				Стр.ПоступлениеРС = НайтиПоступленияНаРСпоСуммеПП(Стр.НомерПоставки, Стр.СуммаПП, Стр.ДатаПлатежа, Стр.НомерПлатежа);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	// Переносим данные в ТЧ документов оплаты
	Объект.ДокументыОплаты.Очистить();
	
	// Используем временную таблицу, чтобы свернуть данные и исключить ошибки
	ТаблицаПоступлений = Объект.ДокументыОплаты.Выгрузить();
	Для Каждого Стр Из Объект.ПлатежныеПозицииФинансирование Цикл
		Если ЗначениеЗаполнено(Стр.РТУ) И ЗначениеЗаполнено(Стр.ПоступлениеРС) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПоступлений.Добавить(), Стр);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПоступлений.Свернуть("ПоступлениеРС, ДатаПлатежа", "Сумма");
	
	Для Каждого Стр Из ТаблицаПоступлений Цикл
		СтрокаОплат = Объект.ДокументыОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОплат, Стр);
		Если Стр.Сумма <> Стр.ПоступлениеРС.СуммаДокумента Тогда
			ШаблонОшибки = НСтр("ru = 'Не совпадает сумма по данным фактора (%1) и документа оплаты %2 (%3)'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Стр.Сумма, Стр.ПоступлениеРС, Стр.ПоступлениеРС.СуммаДокумента);
			Поле = СтрШаблон("Объект.ДокументыОплаты[%1].Сумма", СтрокаОплат.НомерСтроки - 1);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФинансирование(Команда)
	СохранитьФинансированиеНаСервере();
КонецПроцедуры

&НаСервере
Процедура СохранитьФинансированиеНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПлатежныеПозицииФинансирование.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.13");
	СтруктураПоиска = Новый Структура("ПоступлениеРС, ДатаПлатежа");
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СтрРеестр Из Объект.ДокументыОплаты Цикл
			Если Не СтрРеестр.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			Если Ложь Тогда
				ДокОб = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрРеестр);
			ДокОб = СтрРеестр.ПоступлениеРС.ПолучитьОбъект();
			РасшифровкаПлатежа = ДокОб.РасшифровкаПлатежа;
			
			Если РасшифровкаПлатежа.Количество() > 0 Тогда
				мАналитикаБДДС1= РасшифровкаПлатежа[0].АналитикаБДДС1;
				мЦФО = РасшифровкаПлатежа[0].ЦФО;
				мПроект = РасшифровкаПлатежа[0].Проект;
			Иначе
				мАналитикаБДДС1 = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				мЦФО = Справочники.Организации.ПустаяСсылка();
				мПроект = Справочники.Проекты.ПустаяСсылка();
			КонецЕсли;
			
			РасшифровкаПлатежа.Очистить();
			ДанныеИзРеестра = Объект.ПлатежныеПозицииФинансирование.НайтиСтроки(СтруктураПоиска);
			ТЧ.Очистить();
			
			Для Каждого Стр Из ДанныеИзРеестра Цикл
				ЗаполнитьЗначенияСвойств(ТЧ.Добавить(), Стр);
			КонецЦикла;
			
			Если Не ТребуетсяИзменениеДокумента(ТЧ, СтрРеестр.ПоступлениеРС) Тогда
				Сообщить("Переформирован документ " + Строка(СтрРеестр.ПоступлениеРС));
			КонецЕсли;
			
			Для Каждого Стр Из ДанныеИзРеестра Цикл
				НоваяСтр = РасшифровкаПлатежа.Добавить();
				НоваяСтр.ДоговорКонтрагента = ДокОб.ДоговорКонтрагента;
				НоваяСтр.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				НоваяСтр.СуммаПлатежа = Стр.Сумма;
				НоваяСтр.СуммаВзаиморасчетов = НоваяСтр.СуммаПлатежа;
				НоваяСтр.КурсВзаиморасчетов = 1;
				НоваяСтр.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС; // НДС не нужен по счету 76.13
				НоваяСтр.СтатьяДвиженияДенежныхСредств = ДокОб.СтатьяДвиженияДенежныхСредств;
				НоваяСтр.КратностьВзаиморасчетов = 1;
				НоваяСтр.КурсНаДатуПриобретенияРеализацииВалюты = 1;
				НоваяСтр.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
				НоваяСтр.сакс_ДокументРеализации = Стр.РТУ;
				НоваяСтр.ЦФО = мЦФО;
				НоваяСтр.Проект = мПроект;
				НоваяСтр.АналитикаБДДС1 = мАналитикаБДДС1;
			КонецЦикла;
			
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(Строка(ДокОб.Ссылка));
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОстатки(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Вариант = Объект.ВариантЗагрузки;
	Если Вариант = 1 Тогда		 //Райффайзен
		ПрочитатьЛистExcel_Остатки_Райффайзен();
	ИначеЕсли Вариант = 2 Тогда	 //Альфа
		ПрочитатьЛистExcel_Остатки_Альфа();
	ИначеЕсли Вариант = 3 Тогда  //Сбербанк
		ПрочитатьЛистExcel_Остатки_Сбербанк();
	Иначе
		Сообщить("Загрузка данных для выбранного варианта не предусмотрена!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьОстаткиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОстаткиНаСервере()
	
	Для Каждого  Стр Из  Объект.ПлатежныеПозицииПеречислениеОстатков Цикл
		Структура = НайтиРТУпоНомеруИзКупца(Стр.НомерПоставки,Стр.ДатаПоставки);
		Если Структура <> Неопределено Тогда
			Стр.РТУ = Структура.РТУ;	
			Стр.СчетФактура = Структура.СчетФактура;
		Иначе
			Сообщить("Документ реализации " + Стр.НомерПоставки+" от "+Формат(Стр.ДатаПоставки,"ДФ=dd.MM.yyyy")+" не найден!");
		КонецЕсли;
		
		Если Объект.ПоискПоКомментариям Тогда
   			Стр.ПоступлениеРС = НайтиПоступленияНаРСпоНазначениюПлатежа2(Стр.НомерПоставки, Стр.ДатаПлатежа,Истина);
		Иначе	
			Стр.ПоступлениеРС = НайтиПоступленияНаРСпоСуммеПП(Стр.НомерПоставки, Стр.СуммаПП, Стр.ДатаПлатежа, Стр.НомерПлатежа, Истина);
		КонецЕсли;	
	КонецЦикла;
	
	Объект.ДокументыОплаты.Очистить();
	Для Каждого Стр Из Объект.ПлатежныеПозицииПеречислениеОстатков Цикл
		Если Стр.РТУ = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Или
			Стр.ПоступлениеРС = Документы.ПоступлениеНаРасчетныйСчет.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект.ДокументыОплаты.Добавить(),Стр);
	КонецЦикла;
	
	ВрТаб = Объект.ДокументыОплаты.Выгрузить();
	ВрТаб.Свернуть("Выбран,ПоступлениеРС,ДатаПлатежа", "Сумма");
	
	Объект.ДокументыОплаты.Очистить();
	Для Каждого Стр Из ВрТаб Цикл
		Если Стр.Сумма = Стр.ПоступлениеРС.СуммаДокумента Тогда
			ЗаполнитьЗначенияСвойств(Объект.ДокументыОплаты.Добавить(), Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОстатки(Команда)
	
	СохранитьОстаткиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОстаткиНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПлатежныеПозицииПеречислениеОстатков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.13");
	СтруктураПоиска = Новый Структура("ПоступлениеРС, ДатаПлатежа");
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СтрРеестр Из Объект.ДокументыОплаты Цикл
			Если Не СтрРеестр.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			Если Ложь Тогда
				ДокОб = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрРеестр);
			ДокОб = СтрРеестр.ПоступлениеРС.ПолучитьОбъект();
			РасшифровкаПлатежа = ДокОб.РасшифровкаПлатежа;
			
			Если РасшифровкаПлатежа.Количество() > 0 Тогда
				мАналитикаБДДС1= РасшифровкаПлатежа[0].АналитикаБДДС1;
				мЦФО = РасшифровкаПлатежа[0].ЦФО;
				мПроект = РасшифровкаПлатежа[0].Проект;
			Иначе
				мАналитикаБДДС1 = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				мЦФО = Справочники.Организации.ПустаяСсылка();
				мПроект = Справочники.Проекты.ПустаяСсылка();
			КонецЕсли;
			
			РасшифровкаПлатежа.Очистить();
			ДанныеИзРеестра = Объект.ПлатежныеПозицииПеречислениеОстатков.НайтиСтроки(СтруктураПоиска);
			ТЧ.Очистить();
			
			Для Каждого Стр Из ДанныеИзРеестра Цикл
				ЗаполнитьЗначенияСвойств(ТЧ.Добавить(), Стр);
			КонецЦикла;
			
			Если Не ТребуетсяИзменениеДокумента(ТЧ, СтрРеестр.ПоступлениеРС) Тогда
				Сообщить("Переформирован документ " + Строка(СтрРеестр.ПоступлениеРС));
			КонецЕсли;
			
			Для Каждого Стр Из ДанныеИзРеестра Цикл
				НоваяСтр = РасшифровкаПлатежа.Добавить();
				НоваяСтр.ДоговорКонтрагента = ДокОб.ДоговорКонтрагента;
				НоваяСтр.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				НоваяСтр.СуммаПлатежа = Стр.Сумма;
				НоваяСтр.СуммаВзаиморасчетов = НоваяСтр.СуммаПлатежа;
				НоваяСтр.КурсВзаиморасчетов = 1;
				НоваяСтр.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС; // НДС не нужен по счету 76.13
				НоваяСтр.СтатьяДвиженияДенежныхСредств = ДокОб.СтатьяДвиженияДенежныхСредств;
				НоваяСтр.КратностьВзаиморасчетов = 1;
				НоваяСтр.КурсНаДатуПриобретенияРеализацииВалюты = 1;
				НоваяСтр.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
				НоваяСтр.сакс_ДокументРеализации = Стр.РТУ;
				НоваяСтр.ЦФО = мЦФО;
				НоваяСтр.Проект = мПроект;
				НоваяСтр.АналитикаБДДС1 = мАналитикаБДДС1;
			КонецЦикла;
			
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(Строка(ДокОб.Ссылка));
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки		
	
КонецПроцедуры

&НаСервере
Функция НайтиРТУпоНомеруИзКупца(НомерПоставки, ДатаПоставки)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК РТУ,
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО (СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
	|			И (СчетФактураВыданный.Проведен)
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И РеализацияТоваровУслуг.Организация = &Организация
	|	И РеализацияТоваровУслуг.Сакс_НомерИзКупца = &Сакс_НомерИзКупца";
	
	Запрос.УстановитьПараметр("Сакс_НомерИзКупца", НомерПоставки);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДобавитьМесяц(ДатаПоставки, -1)));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДобавитьМесяц(ДатаПоставки, 1)));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Структура = Новый Структура("РТУ,СчетФактура");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Структура, ВыборкаДетальныеЗаписи);
		Возврат Структура;
	КонецЦикла;
	
	Возврат Неопределено;	
КонецФункции

&НаСервере
Функция ПодготовитьТаблицуРТУ()
	
	// Определяем диапазон дат
	ТаблицаДат = Объект.ПлатежныеПозицииФинансирование.Выгрузить( , "ДатаПоставки");
	ТаблицаДат.Свернуть("ДатаПоставки");
	ТаблицаДат.Сортировать("ДатаПоставки");
	ДатаНачала = ТаблицаДат[0].ДатаПоставки;
	ДатаОкончания = ТаблицаДат[ТаблицаДат.Количество() - 1].ДатаПоставки;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Сообщить("В некоторых строках не заполнена Дата поставки!");
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Сакс_НомерИзКупца КАК НомерИзКупца,
		|	РеализацияТоваровУслуг.Ссылка КАК РТУ,
		|	СчетФактураВыданный.Ссылка КАК СчетФактура
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО (СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
		|			И (СчетФактураВыданный.Проведен)
		|ГДЕ
		|	РеализацияТоваровУслуг.Проведен
		|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И РеализацияТоваровУслуг.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИзКупца";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДобавитьМесяц(ДатаНачала, -1)));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДобавитьМесяц(ДатаОкончания, 1)));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ТаблицаРТУ = Запрос.Выполнить().Выгрузить();
	ТаблицаРТУ.Индексы.Добавить("НомерИзКупца");
	Возврат ТаблицаРТУ;

КонецФункции

&НаСервере
Функция ПолучитьДебиторовДоговоровФакторинга()
	
	// Мы не можем сразу взять данные настройки заолнения,
	// потому что в настройке могут быть договоры разных организаций и контрагентов.
	// Поэтому каждый договор из настройки проверяем, подходит ли он нам.
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Владелец", Объект.Фактор);
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
	ВозможныеДоговоры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	НастройкаЗаполнения = сакс_ОбщегоНазначенияПривилегированный.ПолучитьНастройкуЗаполнения("ДебиторыДоговоровФакторингаСАКС");
	Для Каждого Пара Из НастройкаЗаполнения Цикл
		Если ВозможныеДоговоры.Найти(Пара.Значение) <> Неопределено Тогда
			Результат.Вставить(ВРег(Пара.Ключ), Пара.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НайтиПоступленияНаРСпоНазначениюПлатежа2(НомерПоставки,ДатаПлатежа,ПеречислениеОстатков = Ложь)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Проведен
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = &ВидОперации
	|	И ПоступлениеНаРасчетныйСчет.Контрагент = &Контрагент
	|	И &УсловиеОтбораПоНазначениюПлатежа
	//|	И НАЧАЛОПЕРИОДА(ПоступлениеНаРасчетныйСчет.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И ПоступлениеНаРасчетныйСчет.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата2, МЕСЯЦ)
	|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация";
	
	Если ПеречислениеОстатков Тогда
		НазначениеПлатежа = "%ПЕРЕЧИСЛЕНИЕ ОСТАТКОВ%"+ " "+НомерПоставки+"%"; //06.05.19 добавлен пробел в строку поиска для исключения двойных нахождений номер Репин
		НазначениеПлатежа2 = "%Перевод остатка%"+ " "+НомерПоставки+"%";      //06.05.19добавлен пробел в строку поиска  для исключения двойных нахождений номер Репин
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораПоНазначениюПлатежа",
		"(ПоступлениеНаРасчетныйСчет.НазначениеПлатежа ПОДОБНО &НазначениеПлатежа 
		|ИЛИ ПоступлениеНаРасчетныйСчет.НазначениеПлатежа ПОДОБНО &НазначениеПлатежа2)" );
		
	Иначе
		НазначениеПлатежа = "%Финансирование%"+ " " +НомерПоставки+"%";//06.05.19добавлен пробел в строку поиска  для исключения двойных нахождений номер Репин
		НазначениеПлатежа2 = "%NN%"+ " " +НомерПоставки+"%";//06.05.19добавлен пробел в строку поиска  для исключения двойных нахождений номер Репин
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораПоНазначениюПлатежа",
		"(ПоступлениеНаРасчетныйСчет.НазначениеПлатежа ПОДОБНО &НазначениеПлатежа
		|ИЛИ ПоступлениеНаРасчетныйСчет.НазначениеПлатежа ПОДОБНО &НазначениеПлатежа2)" );
	КонецЕсли;
	
	//
	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании);
	Запрос.УстановитьПараметр("Контрагент", Объект.Фактор);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НазначениеПлатежа", НазначениеПлатежа);
	Запрос.УстановитьПараметр("НазначениеПлатежа2", НазначениеПлатежа2);
	Запрос.УстановитьПараметр("Дата", ДатаПлатежа);		
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ДатаПлатежа)+1);		

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПоступлениеНаРС = Неопределено;
	Ненайден = Истина; 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Сообщить(НомерПоставки + " " + ВыборкаДетальныеЗаписи.Ссылка);
		Ненайден = Ложь;
		Если ПоступлениеНаРС <> Неопределено Тогда
			Сообщить("Для поставки "+НомерПоставки+" найдены несколько документов поступления на расчетный счет!");
			Возврат Неопределено;
		Иначе
			ПоступлениеНаРС = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если  Ненайден Тогда
		сообщить("Не найдено для поставки: " + НомерПоставки);
	КонецЕсли;	

	Возврат ПоступлениеНаРС;	
КонецФункции

&НаСервере
Функция НайтиПоступленияНаРСпоСуммеПП(НомерПоставки,СуммаПП,ДатаПлатежа,НомерПлатежа,ПеречислениеОстатков = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Проведен
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = &ВидОперации
	|	И ПоступлениеНаРасчетныйСчет.Контрагент = &Контрагент
	|	И ПоступлениеНаРасчетныйСчет.СуммаДокумента = &СуммаПП
	|	И ПоступлениеНаРасчетныйСчет.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация";
	
	Если НомерПлатежа <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ПоступлениеНаРасчетныйСчет.СуммаДокумента = &СуммаПП",
			"ПоступлениеНаРасчетныйСчет.НомерВходящегоДокумента = &НомерПлатежа");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании);
	Запрос.УстановитьПараметр("Контрагент", Объект.Фактор);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НомерПлатежа", НомерПлатежа);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаПлатежа));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаПлатежа));
	Запрос.УстановитьПараметр("СуммаПП", СуммаПП);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДокументов.Количество() = 1 Тогда
		Возврат ТаблицаДокументов[0].Ссылка;
	ИначеЕсли ТаблицаДокументов.Количество() > 1 Тогда
		Сообщить("Для поставки " + НомерПоставки + " найдены несколько документов поступления на расчетный счет!");
		Возврат Неопределено;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НайтиПоступленияНаРСпоСуммеИДоговору(ДоговорКонтрагента, СуммаПП, ДатаПлатежа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Проведен
		|	И ПоступлениеНаРасчетныйСчет.ВидОперации = &ВидОперации
		|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
		|	И ПоступлениеНаРасчетныйСчет.Контрагент = &Контрагент
		|	И ПоступлениеНаРасчетныйСчет.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И ПоступлениеНаРасчетныйСчет.СуммаДокумента = &СуммаПП
		|	И ПоступлениеНаРасчетныйСчет.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
	ОплатаОтФакторинговойКомпании = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании;
	Запрос.УстановитьПараметр("ВидОперации", ОплатаОтФакторинговойКомпании);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Фактор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СуммаПП", СуммаПП);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаПлатежа));		
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаПлатежа));		
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		ШаблонОшибки = НСтр("ru = 'Для договора %1 найдены несколько документов поступления на расчетный счет!'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ДоговорКонтрагента);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ТребуетсяИзменениеДокумента(ДанныеИзРеестра, Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеИзРеестра.РТУ КАК РТУ,
		|	ДанныеИзРеестра.Сумма КАК Сумма
		|ПОМЕСТИТЬ ДанныеИзРеестра
		|ИЗ
		|	&ДанныеИзРеестра КАК ДанныеИзРеестра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеИзДокумента.сакс_ДокументРеализации КАК сакс_ДокументРеализации,
		|	ДанныеИзДокумента.СуммаПлатежа КАК СуммаПлатежа,
		|	ДанныеИзРеестра.Сумма КАК Сумма
		|ИЗ
		|	ДанныеИзРеестра КАК ДанныеИзРеестра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ДанныеИзДокумента
		|		ПО ДанныеИзРеестра.РТУ = ДанныеИзДокумента.сакс_ДокументРеализации
		|ГДЕ
		|	ДанныеИзРеестра.Сумма <> ЕСТЬNULL(ДанныеИзДокумента.СуммаПлатежа, 0)
		|	И ДанныеИзДокумента.Ссылка = &Ссылка";
	
	Запрос.Параметры.Вставить("Ссылка", Документ);
	Запрос.Параметры.Вставить("ДанныеИзРеестра", ДанныеИзРеестра.Выгрузить(, "РТУ,СУММА"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат Ложь
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНомераПостуленийНаРС(Команда)
	ПараметрыФ = Новый Структура();
	Параметрыф.Вставить("Организация",Объект.Организация);
	Параметрыф.Вставить("Контрагент",Объект.Фактор);
	ПараметрыФ.Вставить("ОткудаВызов",Элементы.Группа8.ТекущаяСтраница.Заголовок);
	ОткрытьФормуМодально("ВнешняяОбработка.РаспределениеФакторинга.Форма.ФормаЗагрузкиСоответствия",Параметрыф,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Загрузка данных" Тогда	
		ТЧ2.Очистить();
		Для Каждого Стр Из Параметр.Данные Цикл
			ЗаполнитьЗначенияСвойств(ТЧ2.Добавить(),Стр);
		КонецЦикла;
		Если Параметр.ОткудаВызов = "Финансирование" Тогда
			ОбновитьСписокДокументов("ПлатежныеПозицииФинансирование");
		Иначе
			ОбновитьСписокДокументов("ПлатежныеПозицииПеречислениеОстатков");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокДокументов(Таблица)
	
	Если ТЧ2.Количество() > 0 Тогда
		Для Каждого Стр Из Объект[Таблица].НайтиСтроки(Новый Структура("ПоступлениеРС", Документы.ПоступлениеНаРасчетныйСчет.ПустаяСсылка())) Цикл
			Соответствия  = Тч2.НайтиСтроки(Новый Структура("Реализация",Стр.РТУ));
			Если Соответствия.Количество() > 0 Тогда
				 Стр.ПоступлениеРС = Соответствия[0].ПоступлениеРС;
			КонецЕсли;			
		КонецЦикла;
		
		Объект.ДокументыОплаты.Очистить();
		
		Для Каждого Стр Из Объект[Таблица] Цикл
			Если Стр.РТУ = Документы.РеализацияТоваровУслуг.ПустаяСсылка() или
				Стр.ПоступлениеРС = Документы.ПоступлениеНаРасчетныйСчет.ПустаяСсылка() Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Объект.ДокументыОплаты.Добавить(),Стр);
		КонецЦикла;
		ВрТаб = Объект.ДокументыОплаты.Выгрузить();
		
		ВрТаб.Свернуть("Выбран,ПоступлениеРС,ДатаПлатежа","Сумма");
		Объект.ДокументыОплаты.Очистить();
		Для Каждого Стр Из ВрТаб Цикл
			Если Стр.Сумма = Стр.ПоступлениеРС.СуммаДокумента Тогда
				ЗаполнитьЗначенияСвойств(Объект.ДокументыОплаты.Добавить(),Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	
