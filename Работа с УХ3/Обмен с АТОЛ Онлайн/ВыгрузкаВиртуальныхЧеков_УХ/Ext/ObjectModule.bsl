// Проверка виртуального чека:
//		https://lk.platformaofd.ru
//		https://lk.platformaofd.ru/web/noauth/cheque

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Наименование = ЭтотОбъект.Метаданные().Синоним;
	ПараметрыРегистрации.Информация = ЭтотОбъект.Метаданные().Комментарий;
	ПараметрыРегистрации.Версия = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	ШаблонПредставленияКоманды = НСтр("ru = '%1 (выполнить регламентное задание)'");
	ПредставлениеКоманды = СтрШаблон(ШаблонПредставленияКоманды, ПараметрыРегистрации.Наименование);
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Представление = ПредставлениеКоманды;
	НоваяКоманда.Идентификатор = ЭтотОбъект.Метаданные().Имя + "_РегламентноеЗадание";
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	ШаблонПредставленияКоманды = НСтр("ru = '%1 (открыть форму обработки)'");
	ПредставлениеКоманды = СтрШаблон(ШаблонПредставленияКоманды, ПараметрыРегистрации.Наименование);
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.Представление = ПредставлениеКоманды;
	НоваяКоманда.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	Если НЕ РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		ПолучитьРезультатыОбработкиВиртуальныхЧеков();
		ОтправитьВиртуальныеЧеки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура СообщитьОбОшибках(ОписаниеОшибок)
	
	Если ТипЗнч(ОписаниеОшибок) = Тип("Массив") Тогда
		СтрокаОшибки = СтрСоединить(ОписаниеОшибок, Символы.ПС);
	Иначе
		СтрокаОшибки = СокрЛП(ОписаниеОшибок);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("АТОЛ-онлайн", УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
	
КонецПроцедуры

Функция ЭкранироватьСпецсимволы(Знач ИсходнаяСтрока)
	
	НоваяСтрока = СтрЗаменить(Стр, "\", "\\");
	НоваяСтрока = СтрЗаменить(Стр, Символы.ПС, "\n");
	НоваяСтрока = СтрЗаменить(Стр, Символы.ВК, "\r");
	НоваяСтрока = СтрЗаменить(Стр, Символы.Таб, "\t");
	НоваяСтрока = СтрЗаменить(Стр, "/", "\/");
	НоваяСтрока = СтрЗаменить(Стр, """", "\""");
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ПолучитьЭлементСтруктуры(Структура, Ключ, Значение, ТипЗначения = Неопределено, ОписаниеОшибок = Неопределено)
	
	ПолученноеЗначение = Неопределено;
	Если НЕ Структура.Свойство(Ключ, ПолученноеЗначение) Тогда
		Если ОписаниеОшибок <> Неопределено Тогда
			ШаблонОшибки = НСтр("ru = 'Ключ ""%1"" в структуре не найден!'");
			ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Ключ));
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗначения = Неопределено Тогда
		Значение = ПолученноеЗначение;
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ПолученноеЗначение) <> Тип(ТипЗначения) Тогда
		Если ОписаниеОшибок <> Неопределено Тогда
			ШаблонОшибки = НСтр("ru = 'Ключ ""%1"" имеет ошибочный тип: %2!'");
			ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Ключ, ТипЗнч(Значение)));
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	Значение = ПолученноеЗначение;
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтрокуJSON(ЗаписываемоеЗначение, ОписаниеОшибок)
	
	Попытка
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, ЗаписываемоеЗначение, Новый НастройкиСериализацииJSON);
		СтрокаОтвета = ЗаписьJSON.Закрыть();
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка при формировании строки запроса к серверу! Описание ошибки: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СтрокаОтвета;
	
КонецФункции

Функция ПрочитатьСтрокуJSON(СтрокаJSON, ОписаниеОшибок)
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка при разборе ответа сервера! Описание ошибки: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ОписаниеОшибки()));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Строка JSON: %1'"), СтрокаJSON));
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(СтруктураОтвета) <> Тип("Структура") Тогда
		ОписаниеОшибок.Добавить(НСтр("ru = 'Ошибка при разборе ответа сервера! Полученный результат не является структурой.'"));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Строка JSON: %1'"), СтрокаJSON));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьНастройкиЗаполнения(НастройкиЗаполнения, ИдентификаторНастройки, ОписаниеОшибок)
	
	Попытка
		НастройкиЗаполнения = Справочники.сакс_НастройкиЗаполнения.ПолучитьДанныеНастройки(ИдентификаторНастройки);
	Исключение
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция СохранитьНастройкиЗаполнения(ИдентификаторНастройки, НастройкиЗаполнения, ОписаниеОшибок)
	
	Попытка
		Справочники.сакс_НастройкиЗаполнения.СохранитьДанныеНастройки(ИдентификаторНастройки, НастройкиЗаполнения);
	Исключение
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьФискальнуюОперацию(ФискальнаяОперация)
	
	// Запишем фискальную операцию
	НаборЗаписей = РегистрыСведений.ФискальныеОперации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ФискальнаяОперация.ДокументОснование);
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ФискальнаяОперация.ИдентификаторЗаписи);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, ФискальнаяОперация);
	НаборЗаписей.Записать();
	
	// Запишем вид онлайн операции
	Если ФискальнаяОперация.Свойство("СвойствоОнлайнОперация") Тогда
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ФискальнаяОперация.ДокументОснование;
		МенеджерЗаписи.Свойство = ФискальнаяОперация.СвойствоОнлайнОперация;
		МенеджерЗаписи.Значение = ФискальнаяОперация.ЗначениеОнлайнОперация;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьНовыйТокен(Соединение, ИдентификаторНастройки, ОписаниеОшибок)
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("login", Соединение.Логин);
	СтруктураЗапроса.Вставить("pass", Соединение.Пароль);
	
	ТекстЗапроса = ПолучитьСтрокуJSON(СтруктураЗапроса, ОписаниеОшибок);
	Если ТекстЗапроса = Неопределено Тогда
		ОписаниеОшибок.Добавить(НСтр("ru = 'Не удалось получить новый токен. Ошибка формирования запроса к сервер!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Accept", "application/json");
	
	АдресРесурса = СтрШаблон("/possystem/%1/getToken", Соединение.ВерсияAPI);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	Попытка
		HTTPОтвет = Соединение.HTTP.ОтправитьДляОбработки(HTTPЗапрос);
		ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	Исключение
		ОписаниеОшибок.Добавить(НСтр("ru = 'Не удалось получить новый токен. Ошибка в ответе сервера!'"));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	СтруктураОтвета = ПрочитатьСтрокуJSON(ОтветСтрокой, ОписаниеОшибок);
	Если СтруктураОтвета = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'Текст ответа сервера: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ОтветСтрокой));
		Возврат Ложь;
	КонецЕсли;
	
	Соединение.Вставить("Токен", СтруктураОтвета["token"]);
	Соединение.Вставить("ДатаСозданияТокена", Дата(СтруктураОтвета["timestamp"]));
	
	НастройкиЗаполнения = Новый Структура;
	НастройкиЗаполнения.Вставить("Токен", Соединение.Токен);
	НастройкиЗаполнения.Вставить("ДатаСозданияТокена", Соединение.ДатаСозданияТокена);
	
	Если НЕ СохранитьНастройкиЗаполнения(ИдентификаторНастройки, НастройкиЗаполнения, ОписаниеОшибок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТокенИзУТ(Соединение, ОписаниеОшибок)
	
	ИмяСервера = "Srv-2.cloud.toy.ru";
	ИмяБазы = "ut_toy_ru_2017";
	Пользователь = "Костычев Анатолий Викторович";
	Пароль = "nofxN777";
	
	Попытка
		СторонняяБаза = Новый COMОбъект("V83.COMConnector.8.3.9.2170");
		СтрокаСоединения = НСтр("ru = 'Srvr=""%1"";Ref=""%2"";Usr=""%3"";Pwd=""%4""'");
		СтрокаСоединения = СтрШаблон(СтрокаСоединения, ИмяСервера, ИмяБазы, Пользователь, Пароль);
		COMСоединение = СторонняяБаза.Connect(СтрокаСоединения);
	Исключение
		ОписаниеОшибок.Добавить(НСтр("ru = 'Ошибка получения Токена из УТ. Ошибка установки COM-соединения!'"));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ТокенУТ = COMСоединение.РегистрыСведений.Константы.ПолучитьКонстанту("Token_АТОЛОнлайн");
	Исключение
		ОписаниеОшибок.Добавить(НСтр("ru = 'Ошибка получения Токена из УТ. Ошибка получения значения Token_АТОЛОнлайн.'"));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ТокенУТ) Тогда
		ОписаниеОшибок.Добавить(НСтр("ru = 'Не указано значение рабочего Токена в настройках УТ!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Соединение.Вставить("Токен", ТокенУТ);
	Соединение.Вставить("ДатаСозданияТокена", ТекущаяДатаСеанса());
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТокен(Соединение, ИдентификаторНастройки, ОписаниеОшибок)
	
	Если Соединение.ПолучатьТокенИзУТ Тогда
		// Токен получаем из УТ по COM-соединению
		Если НЕ ПолучитьТокенИзУТ(Соединение, ОписаниеОшибок) Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Соединение.Токен) Тогда
		// Если Токен не найден, то создадим его
		Если НЕ СоздатьНовыйТокен(Соединение, ИдентификаторНастройки, ОписаниеОшибок) Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Соединение.ДатаСозданияТокена) Тогда
		// Если Токен "просрочен", то создадим новый
		Если НЕ СоздатьНовыйТокен(Соединение, ИдентификаторНастройки, ОписаниеОшибок) Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли Соединение.ДатаСозданияТокена + 23 * 60 * 60 < ТекущаяДатаСеанса() Тогда
		// Если Токен "просрочен", то создадим новый
		Если НЕ СоздатьНовыйТокен(Соединение, ИдентификаторНастройки, ОписаниеОшибок) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПодключитьАТОЛОнлайн(ИдентификаторНастройки, Организация, ОписаниеОшибок)
	
	НастройкиАтолОнлайн = Неопределено;
	Если НЕ ПолучитьНастройкиЗаполнения(НастройкиАтолОнлайн, ИдентификаторНастройки, ОписаниеОшибок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПодключения = Новый Структура("Токен, ДатаСозданияТокена, НаименованиеТовара, ОказаниеУслуг, АвансовыеПлатежи", "", '00010101', "", Ложь, Ложь);
	
	// Получаем каждый параметр в попытке с целью проверки его наличия
	Попытка
		СтруктураПодключения.Вставить("Дата", НастройкиАтолОнлайн.Дата);
		СтруктураПодключения.Вставить("ИмяСервера", НастройкиАтолОнлайн.ИмяСервера);
		СтруктураПодключения.Вставить("Логин", НастройкиАтолОнлайн.Логин);
		СтруктураПодключения.Вставить("Пароль", НастройкиАтолОнлайн.Пароль);
		СтруктураПодключения.Вставить("АдресРасчетов", НастройкиАтолОнлайн.АдресРасчетов);
		СтруктураПодключения.Вставить("ЭлектроннаяПочта", НастройкиАтолОнлайн.ЭлектроннаяПочта);
		СтруктураПодключения.Вставить("ИНН", НастройкиАтолОнлайн.ИНН);
		СтруктураПодключения.Вставить("КодГруппы", НастройкиАтолОнлайн.КодГруппы);
		СтруктураПодключения.Вставить("ПолучатьТокенИзУТ", НастройкиАтолОнлайн.ПолучатьТокенИзУТ);
		СтруктураПодключения.Вставить("Организация", Организация);
		СтруктураПодключения.Вставить("ВерсияAPI", НастройкиАтолОнлайн.ВерсияAPI);
	Исключение
		ОписаниеОшибок.Добавить(НСтр("ru = 'Ошибка получения параметра из НастройкиАтолОнлайн'"));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
	// Заполним необязательные параметры подключения
	ПолучитьЭлементСтруктуры(НастройкиАтолОнлайн, "Токен", СтруктураПодключения.Токен, "Строка");
	ПолучитьЭлементСтруктуры(НастройкиАтолОнлайн, "ДатаСозданияТокена", СтруктураПодключения.ДатаСозданияТокена, "Дата");
	ПолучитьЭлементСтруктуры(НастройкиАтолОнлайн, "НаименованиеТовара", СтруктураПодключения.НаименованиеТовара, "Строка");
	ПолучитьЭлементСтруктуры(НастройкиАтолОнлайн, "ОказаниеУслуг", СтруктураПодключения.ОказаниеУслуг, "Булево");
	ПолучитьЭлементСтруктуры(НастройкиАтолОнлайн, "АвансовыеПлатежи", СтруктураПодключения.АвансовыеПлатежи, "Булево");
	
	// Получаем настройки доп. свойств виртуального чека
	НастройкиДопСвойств = Неопределено;
	Если НЕ ПолучитьНастройкиЗаполнения(НастройкиДопСвойств, "НастройкиАтолОнлайнДопСвойства", ОписаниеОшибок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		СтруктураПодключения.Вставить("СвойствоОнлайнОперация", НастройкиДопСвойств.Свойство);
		СтруктураПодключения.Вставить("ОнлайнОперацияАванс", НастройкиДопСвойств.Аванс);
		СтруктураПодключения.Вставить("ОнлайнОперацияВозвратАванса", НастройкиДопСвойств.ВозвратАванса);
		СтруктураПодключения.Вставить("ОнлайнОперацияЗачетАванса", НастройкиДопСвойств.ЗачетАванса);
		СтруктураПодключения.Вставить("ОнлайнОперацияПолныйРасчет", НастройкиДопСвойств.ПолныйРасчет);
	Исключение
		ОписаниеОшибок.Добавить(НСтр("ru = 'Ошибка получения параметра из НастройкиАтолОнлайнДопСвойства'"));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		ssl4 = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	Исключение
		ОписаниеОшибок.Добавить(НСтр("ru = 'Получение параметров подключения АТОЛ-онлайн. Ошибка установки защищенного соединения.'"));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		HTTP = Новый HTTPСоединение(СтруктураПодключения.ИмяСервера, , , , , , ssl4);
		СтруктураПодключения.Вставить("HTTP", HTTP);
	Исключение
		ОписаниеОшибок.Добавить(НСтр("ru = 'Получение параметров подключения АТОЛ-онлайн. Ошибка установки HTTP-соединения.'"));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ ПолучитьТокен(СтруктураПодключения, ИдентификаторНастройки, ОписаниеОшибок) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураПодключения;
	
КонецФункции

// ТипЧека:
//	sell			- чек "Прихода"
//	sell_refund		- чек "Возврат прихода"
//
// ПризнакСпособаРасчета:
//	advance			- если Аванс
//	full_payment 	- если Полная оплата
//
// ПризнакПредметаРасчета:
//	commodity		- если Товар
//	service			– если Услуга
//	payment			- если Авансовый платеж
//
Функция ОтправитьВиртуальныйЧек(ВиртуальныйЧек, Соединение, ТипОперации, ОписаниеОшибок)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТипОперации = "Аванс" ИЛИ ТипОперации = "ВозвратАванса" Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
			|	""АВАНС"" КАК НаименованиеТовара,
			|	""payment"" КАК ПризнакПредметаРасчета,
			|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)) КАК СтавкаНДС,
			|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа, ПоступлениеНаРасчетныйСчет.СуммаДокумента) КАК СуммаПлатежа
			|ИЗ
			|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
			|		ПО ПоступлениеНаРасчетныйСчет.Ссылка = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка
			|ГДЕ
			|	ПоступлениеНаРасчетныйСчет.Ссылка = &Ссылка";
	ИначеЕсли НЕ ПустаяСтрока(Соединение.НаименованиеТовара) Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
			|	" + Соединение.НаименованиеТовара + " КАК НаименованиеТовара,
			|	" + ?(Соединение.ОказаниеУслуг, """service""", """commodity""") + " КАК ПризнакПредметаРасчета,
			|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)) КАК СтавкаНДС,
			|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа, ПоступлениеНаРасчетныйСчет.СуммаДокумента) КАК СуммаПлатежа
			|ИЗ
			|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
			|		ПО ПоступлениеНаРасчетныйСчет.Ссылка = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка
			|ГДЕ
			|	ПоступлениеНаРасчетныйСчет.Ссылка = &Ссылка";
	Иначе
		ТекстОшибки = НСтр("ru = 'Ошибка! Не удалось определить способ зачета авансов.'");
		ОписаниеОшибок.Добавить(ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.Организация КАК Организация,
		|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Ссылка = &Ссылка";
	
	Если ТипОперации = "ВозвратАванса" ИЛИ ТипОперации = "ЗачетАванса" Тогда
		Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ФискальныеОперации.ДокументОснование КАК ДокументОснование,
			|	ФискальныеОперации.ФискальныйПризнак КАК ФискальныйПризнак
			|ИЗ
			|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
			|ГДЕ
			|	ФискальныеОперации.ДокументОснование = &Ссылка
			|	И ФискальныеОперации.ФискальныйПризнак <> """"";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ВиртуальныйЧек);
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатПакета[1].Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		ШаблонОшибки = НСтр("ru = 'Ошибка получения структуры виртуального чека: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ВиртуальныйЧек));
		Возврат Результат;
	КонецЕсли;
	
	// Выполним проверку на организацию
	Если Соединение.Организация <> Выборка.Организация Тогда
		ШаблонОшибки = НСтр("ru = 'Организация в документе: %1, не соответствует организации в настройках: %2.'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Выборка.Организация, Соединение.Организация));
		ШаблонОшибки = НСтр("ru = 'Виртуальный чек основания: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ВиртуальныйЧек));
		Возврат Результат;
	КонецЕсли;
	
	СуммаДокумента = Выборка.СуммаДокумента;
	
	Если ТипОперации = "ПолныйРасчет" Тогда
		ТипЧека = "sell";
		ПризнакСпособаРасчета = "full_payment";
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ФискальныйПризнакОснования = "";
		ЗначениеОнлайнОперация = Соединение.ОнлайнОперацияПолныйРасчет;
		ВидОплаты = "1";
	ИначеЕсли ТипОперации = "Аванс" Тогда
		ТипЧека = "sell";
		ПризнакСпособаРасчета = "advance";
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ФискальныйПризнакОснования = "";
		ЗначениеОнлайнОперация = Соединение.ОнлайнОперацияАванс;
		ВидОплаты = "1";
	ИначеЕсли ТипОперации = "ВозвратАванса" Тогда
		ТипЧека = "sell_refund";
		ПризнакСпособаРасчета = "advance";
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
		ЗначениеОнлайнОперация = Соединение.ОнлайнОперацияВозвратАванса;
		ВидОплаты = "1";
		
		Выборка = РезультатПакета[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			ФискальныйПризнакОснования = Выборка.ФискальныйПризнак;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ФискальныйПризнакОснования) Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка! Не удалось сформировать чек на возврат.'");
			ОписаниеОшибок.Добавить(ТекстОшибки);
			ТекстОшибки = НСтр("ru = 'Виртуальный чек, на основании которого делается возврат, не зарегистрирован в ОФД.'");
			ОписаниеОшибок.Добавить(ТекстОшибки);
			ШаблонОшибки = НСтр("ru = 'Виртуальный чек основания: %1'");
			ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ВиртуальныйЧек));
			Возврат Результат;
		КонецЕсли;
	ИначеЕсли ТипОперации = "ЗачетАванса" Тогда
		ТипЧека = "sell";
		ПризнакСпособаРасчета = "full_payment";
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ЗначениеОнлайнОперация = Соединение.ОнлайнОперацияЗачетАванса;
		ВидОплаты = "2";
		
		Выборка = РезультатПакета[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			ФискальныйПризнакОснования = Выборка.ФискальныйПризнак;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ФискальныйПризнакОснования) Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка! Не удалось сформировать чек на зачет аванс.'");
			ОписаниеОшибок.Добавить(ТекстОшибки);
			ТекстОшибки = НСтр("ru = 'Виртуальный чек, на основании которого делается зачет аванса, не зарегистрирован в ОФД.'");
			ОписаниеОшибок.Добавить(ТекстОшибки);
			ШаблонОшибки = НСтр("ru = 'Виртуальный чек основания: %1'");
			ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ВиртуальныйЧек));
			Возврат Результат;
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru = 'Ошибка! Не удалось определить тип операции.'");
		ОписаниеОшибок.Добавить(ТекстОшибки);
		ШаблонОшибки = НСтр("ru = 'Виртуальный чек: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ВиртуальныйЧек));
		Возврат Результат;
	КонецЕсли;
	
	СтавкиНДС = Новый Соответствие;
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.БезНДС, "none");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС0, "vat0");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС10, "vat10");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, "vat110");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС18, "vat18");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, "vat118");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС20, "vat20");
	СтавкиНДС.Вставить(Перечисления.СтавкиНДС.НДС20_120, "vat120");
	
	ИдентификаторВиртуальногоЧека = Новый УникальныйИдентификатор;
	ДатаДокумента = ТекущаяДатаСеанса();
	ЭлектронныйАдресКлиента = "xxx@xxx.xx";
	СистемаНалогообложения = "osn";
	
	СтруктураКлиента = Новый Структура;
	СтруктураКлиента.Вставить("email", ЭлектронныйАдресКлиента);
	
	СтруктураКомпании = Новый Структура;
	СтруктураКомпании.Вставить("email", Соединение.ЭлектроннаяПочта);
	СтруктураКомпании.Вставить("sno", СистемаНалогообложения);
	СтруктураКомпании.Вставить("inn", Соединение.ИНН);
	СтруктураКомпании.Вставить("payment_address", Соединение.АдресРасчетов);
	
	МассивПозиций = Новый Массив;
	МассивОплат = Новый Массив;
	
	Выборка = РезультатПакета[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСтавкиНДС = Новый Структура;
		СтруктураСтавкиНДС.Вставить("type", СтавкиНДС.Получить(Выборка.СтавкаНДС));
		
		СтруктураПозиции = Новый Структура;
		СтруктураПозиции.Вставить("name", ЭкранироватьСпецсимволы(Выборка.НаименованиеТовара));
		СтруктураПозиции.Вставить("price", Выборка.СуммаПлатежа);
		СтруктураПозиции.Вставить("quantity", 1);
		СтруктураПозиции.Вставить("sum", Выборка.СуммаПлатежа);
		СтруктураПозиции.Вставить("measurement_unit", "шт");
		СтруктураПозиции.Вставить("payment_method", ПризнакСпособаРасчета);
		СтруктураПозиции.Вставить("payment_object", Выборка.ПризнакПредметаРасчета);
		СтруктураПозиции.Вставить("vat", СтруктураСтавкиНДС);
		МассивПозиций.Добавить(СтруктураПозиции);
	КонецЦикла;
	
	СтруктураОплаты = Новый Структура;
	СтруктураОплаты.Вставить("type", ВидОплаты);
	СтруктураОплаты.Вставить("sum", СуммаДокумента);
	МассивОплат.Добавить(СтруктураОплаты);
	
	СтруктураЧека = Новый Структура;
	СтруктураЧека.Вставить("client", СтруктураКлиента);
	СтруктураЧека.Вставить("company", СтруктураКомпании);
	СтруктураЧека.Вставить("items", МассивПозиций);
	СтруктураЧека.Вставить("payments", МассивОплат);
	СтруктураЧека.Вставить("total", СуммаДокумента);
	
	Если ТипОперации = "ВозвратАванса" Тогда
		СтруктураЧека.Вставить("additional_check_props", ФискальныйПризнакОснования);
	КонецЕсли;
	
	СтруктураСервиса = Новый Структура;
	СтруктураСервиса.Вставить("callback_url", Соединение.АдресРасчетов);
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("external_id", СокрЛП(ИдентификаторВиртуальногоЧека));
	СтруктураЗапроса.Вставить("receipt", СтруктураЧека);
	СтруктураЗапроса.Вставить("service", СтруктураСервиса);
	СтруктураЗапроса.Вставить("timestamp", ДатаДокумента);
	
	ТекстЗапроса = ПолучитьСтрокуJSON(СтруктураЗапроса, ОписаниеОшибок);
	Если ТекстЗапроса = Неопределено Тогда
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Виртуальный чек: %1. Ошибка формирования текста запроса!'"), ВиртуальныйЧек));
		Возврат Результат;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Token", Соединение.Токен);
	
	АдресРесурса = СтрШаблон("/possystem/%1/%2/%3", Соединение.ВерсияAPI, Соединение.КодГруппы, ТипЧека);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	
	Попытка
		HTTPОтвет = Соединение.HTTP.ОтправитьДляОбработки(HTTPЗапрос);
		ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	Исключение
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Виртуальный чек: %1. Ошибка в ответе сервера!'"), ВиртуальныйЧек));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Результат;
	КонецПопытки;
	
	СтруктураОтвета = ПрочитатьСтрокуJSON(ОтветСтрокой, ОписаниеОшибок);
	Если СтруктураОтвета = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'Текст ответа сервера: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ОтветСтрокой));
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторВиртуальногоЧека = "";
	Если ПолучитьЭлементСтруктуры(СтруктураОтвета, "uuid", ИдентификаторВиртуальногоЧека, "Строка") Тогда
		Результат.Вставить("ДокументОснование", ВиртуальныйЧек);
		Результат.Вставить("ИдентификаторЗаписи", ИдентификаторВиртуальногоЧека);
		Результат.Вставить("Дата", Дата(СтруктураОтвета["timestamp"]));
		Результат.Вставить("Организация", Соединение.Организация);
		Результат.Вставить("ТипДокумента", Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек);
		Результат.Вставить("ДополнительныйРеквизит", ФискальныйПризнакОснования);
		Результат.Вставить("ТипРасчета", ТипРасчета);
		Результат.Вставить("СвойствоОнлайнОперация", Соединение.СвойствоОнлайнОперация);
		Результат.Вставить("ЗначениеОнлайнОперация", ЗначениеОнлайнОперация);
		Результат.Вставить("Ошибка", Ложь);
		Возврат Результат;
	КонецЕсли;
	
	ЗначениеError = "";
	Если ПолучитьЭлементСтруктуры(СтруктураОтвета, "error", ЗначениеError, "Структура") Тогда
		ШаблонОшибки = НСтр("ru = 'Ошибка! Не удалось отправить Виртуальный чек: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ВиртуальныйЧек));
		ШаблонОшибки = НСтр("ru = 'Код ошибки: %1. Текст ошибки: %2'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ЗначениеError["code"], ЗначениеError["text"]));
		ШаблонОшибки = НСтр("ru = 'Текст ответа сервера: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ОтветСтрокой));
		ШаблонОшибки = НСтр("ru = 'Токен: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Соединение.Токен));
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьВиртуальныеЧекиПоОрганизации(Организация, ИдентификаторНастройки, ОписаниеОшибок)
	
	ОписаниеОшибок = Новый Массив;
	
	ШаблонОшибки = НСтр("ru = 'Ошибка отправки виртуальных чеков по организации: %1!'");
	ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Организация));
	
	Соединение = ПодключитьАТОЛОнлайн(ИдентификаторНастройки, Организация, ОписаниеОшибок);
	Если Соединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникКонтрагенты
		|		ПО ПоступлениеНаРасчетныйСчет.Контрагент = СправочникКонтрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО (ПоступлениеНаРасчетныйСчет.Ссылка = (ВЫРАЗИТЬ(ФискальныеОперации.ДокументОснование КАК Документ.ПоступлениеНаРасчетныйСчет)))
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Дата >= &Дата
		|	И ПоступлениеНаРасчетныйСчет.Проведен
		|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
		|	И ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
		|	И СправочникКонтрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И СправочникКонтрагенты.сакс_ИндивидуальныйПредприниматель = ЛОЖЬ
		|	И СправочникКонтрагенты.РегистрационныйНомер = """"
		|	И ФискальныеОперации.Дата ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Соединение.Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если Соединение.АвансовыеПлатежи Тогда
		ТипОперации = "Аванс";
	Иначе
		ТипОперации = "ПолныйРасчет";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = ОтправитьВиртуальныйЧек(Выборка.Документ, Соединение, ТипОперации, ОписаниеОшибок);
		Если Результат.Ошибка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьФискальнуюОперацию(Результат);
	КонецЦикла;
	
	// Сообщим об ошибках, если они есть
	Если ОписаниеОшибок.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьСписокВиртуальныхЧековПоОрганизации(Организация, СписокДокументов, ТипОперации) Экспорт
	
	ОписаниеОшибок = Новый Массив;
	
	ШаблонОшибки = НСтр("ru = 'Ошибка отправки списка виртуальных чеков по организации: %1!'");
	ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Организация));
	
	СписокНастроекАтолОнлайн = Неопределено;
	Если НЕ ПолучитьНастройкиЗаполнения(СписокНастроекАтолОнлайн, "НастройкиАтолОнлайн", ОписаниеОшибок) Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаЗаполнения = СписокНастроекАтолОнлайн.Получить(Организация);
	Если НастройкаЗаполнения = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'В списке настроек заполнения ""НастройкиАтолОнлайн"", не найдена настройка для организации: %1!'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Организация));
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Соединение = ПодключитьАТОЛОнлайн(НастройкаЗаполнения, Организация, ОписаниеОшибок);
	Если Соединение = Неопределено Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ,
		|	МАКСИМУМ(ЕСТЬNULL(ФискальныеОперации.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК Дата
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО ПоступлениеНаРасчетныйСчет.Ссылка = ФискальныеОперации.ДокументОснование
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Ссылка В(&СписокДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеНаРасчетныйСчет.Ссылка";
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Документ = Выборка.Документ;
		ДатаОперации = Выборка.Дата;
		
		// Проверим, возможно чек уже отправлен
		Если ЗначениеЗаполнено(ДатаОперации) Тогда
			ШаблонОшибки = НСтр("ru = 'Виртуальный чек: %1, уже отправлен в АТОЛ-Онлайн! Дата отправки: %2. Повторная отправка не возможна!'");
			ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Документ, ДатаОперации));
			Продолжить;
		КонецЕсли;
		
		Результат = ОтправитьВиртуальныйЧек(Документ, Соединение, ТипОперации, ОписаниеОшибок);
		Если Результат.Ошибка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьФискальнуюОперацию(Результат);
	КонецЦикла;
	
	// Сообщим об ошибках, если они есть
	Если ОписаниеОшибок.Количество() > 1 Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьСписокВиртуальныхЧековНаВозвратПоОрганизации(Организация, СписокДокументов) Экспорт
	
	ОписаниеОшибок = Новый Массив;
	
	ШаблонОшибки = НСтр("ru = 'Ошибка отправки списка виртуальных чеков на возврат по организации: %1!'");
	ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Организация));
	
	СписокНастроекАтолОнлайн = Неопределено;
	Если НЕ ПолучитьНастройкиЗаполнения(СписокНастроекАтолОнлайн, "НастройкиАтолОнлайн", ОписаниеОшибок) Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаЗаполнения = СписокНастроекАтолОнлайн.Получить(Организация);
	Если НастройкаЗаполнения = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'В списке настроек заполнения ""НастройкиАтолОнлайн"", не найдена настройка для организации: %1!'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Организация));
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Соединение = ПодключитьАТОЛОнлайн(НастройкаЗаполнения, Организация, ОписаниеОшибок);
	Если Соединение = Неопределено Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ЕСТЬNULL(ФискальныеОперации.ДополнительныйРеквизит, """")) = """"
		|			ТОГДА ""Аванс""
		|		КОГДА МАКСИМУМ(ФискальныеОперации.ТипРасчета) = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
		|			ТОГДА ""ВозвратАванса""
		|		ИНАЧЕ ""ЗачетАванса""
		|	КОНЕЦ КАК ТипОперации,
		|	МАКСИМУМ(ЕСТЬNULL(ФискальныеОперации.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК Дата
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО ПоступлениеНаРасчетныйСчет.Ссылка = ФискальныеОперации.ДокументОснование
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Ссылка В(&СписокДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеНаРасчетныйСчет.Ссылка";
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Документ = Выборка.Документ;
		
		// Проверим, возможно чек уже возвращен/зачтен
		Если Выборка.ТипОперации = "ВозвратАванса" Тогда
			ШаблонОшибки = НСтр("ru = 'На виртуальный чек: %1, оформлен возврат в АТОЛ-Онлайн! Дата возврата: %2. Повторный возврат не возможен!'");
			ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Документ, Выборка.Дата));
			Продолжить;
		ИначеЕсли Выборка.ТипОперации = "ЗачетАванса" Тогда
			ШаблонОшибки = НСтр("ru = 'На виртуальный чек: %1, оформлен зачет аванса в АТОЛ-Онлайн! Дата зачета аванса: %2. Возврат не возможен!'");
			ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Документ, Выборка.Дата));
			Продолжить;
		КонецЕсли;
		
		Результат = ОтправитьВиртуальныйЧек(Документ, Соединение, "ВозвратАванса", ОписаниеОшибок);
		Если Результат.Ошибка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьФискальнуюОперацию(Результат);
	КонецЦикла;
	
	// Сообщим об ошибках, если они есть
	Если ОписаниеОшибок.Количество() > 1 Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьСписокВиртуальныхЧековНаЗачетАвансаПоОрганизации(Организация, СписокДокументов) Экспорт
	
	ОписаниеОшибок = Новый Массив;
	
	ШаблонОшибки = НСтр("ru = 'Ошибка отправки списка виртуальных чеков на зачет аванса по организации: %1!'");
	ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Организация));
	
	СписокНастроекАтолОнлайн = Неопределено;
	Если НЕ ПолучитьНастройкиЗаполнения(СписокНастроекАтолОнлайн, "НастройкиАтолОнлайн", ОписаниеОшибок) Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаЗаполнения = СписокНастроекАтолОнлайн.Получить(Организация);
	Если НастройкаЗаполнения = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'В списке настроек заполнения ""НастройкиАтолОнлайн"", не найдена настройка для организации: %1!'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Организация));
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Соединение = ПодключитьАТОЛОнлайн(НастройкаЗаполнения, Организация, ОписаниеОшибок);
	Если Соединение = Неопределено Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ЕСТЬNULL(ФискальныеОперации.ДополнительныйРеквизит, """")) = """"
		|			ТОГДА ""Аванс""
		|		КОГДА МАКСИМУМ(ФискальныеОперации.ТипРасчета) = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
		|			ТОГДА ""ВозвратАванса""
		|		ИНАЧЕ ""ЗачетАванса""
		|	КОНЕЦ КАК ТипОперации,
		|	МАКСИМУМ(ЕСТЬNULL(ФискальныеОперации.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК Дата
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО ПоступлениеНаРасчетныйСчет.Ссылка = ФискальныеОперации.ДокументОснование
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Ссылка В(&СписокДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеНаРасчетныйСчет.Ссылка";
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Документ = Выборка.Документ;
		
		// Проверим, возможно чек уже возвращен/зачтен
		Если Выборка.ТипОперации = "ВозвратАванса" Тогда
			ШаблонОшибки = НСтр("ru = 'На виртуальный чек: %1, оформлен возврат в АТОЛ-Онлайн! Дата возврата: %2. Зачет аванса не возможен!'");
			ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Документ, Выборка.Дата));
			Продолжить;
		ИначеЕсли Выборка.ТипОперации = "ЗачетАванса" Тогда
			ШаблонОшибки = НСтр("ru = 'На виртуальный чек: %1, оформлен зачет аванса в АТОЛ-Онлайн! Дата зачета аванса: %2. Повторный зачет аванса не возможен!'");
			ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Документ, Выборка.Дата));
			Продолжить;
		КонецЕсли;
		
		Результат = ОтправитьВиртуальныйЧек(Документ, Соединение, "ЗачетАванса", ОписаниеОшибок);
		Если Результат.Ошибка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьФискальнуюОперацию(Результат);
	КонецЦикла;
	
	// Сообщим об ошибках, если они есть
	Если ОписаниеОшибок.Количество() > 1 Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьРезультатОбработкиВиртуальногоЧека(ВиртуальныйЧек, ИдентификаторВиртуальногоЧека, ДополнительныйРеквизит, ТипРасчета, Соединение, ОписаниеОшибок)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Истина);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Token", Соединение.Токен);
	
	АдресРесурса = СтрШаблон("/possystem/%1/%2/report/%3", Соединение.ВерсияAPI, Соединение.КодГруппы, ИдентификаторВиртуальногоЧека);
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Попытка
		HTTPОтвет = Соединение.HTTP.Получить(HTTPЗапрос);
		ОтветСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	Исключение
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Виртуальный чек: %1. Ошибка в ответе сервера!'"), ВиртуальныйЧек));
		ОписаниеОшибок.Добавить(СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки()));
		Возврат Результат;
	КонецПопытки;
	
	СтруктураОтвета = ПрочитатьСтрокуJSON(ОтветСтрокой, ОписаниеОшибок);
	Если СтруктураОтвета = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'Текст ответа сервера: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ОтветСтрокой));
		Возврат Результат;
	КонецЕсли;
	
	//{
	//	"uuid": "2ea26f17–0884–4f08–b120–306fc096a58f",
	//	"error": null,
	//	"status": "done",
	//	"payload": {
	//		"total": 1598,									// Итоговая сумма в рублях		(Сумма)
	//		"fns_site": "www.nalog.ru",						// Адрес сайта ФНС				(АдресСайтаПроверки)
	//		"fn_number": "1110000100238211",				// Номер ФН 					(ЗаводскойНомерФН)
	//		"shift_number": 23,								// Номер смены					(НомерСменыККМ)
	//		"receipt_datetime": "12.04.2017 20:16:00",		// Дата и время документа из ФН	(Дата)
	//		"fiscal_receipt_number": 6,						// Номер чека в смене
	//		"fiscal_document_number": 133,					// Фискальный номер документа	(НомерЧекаККМ)
	//		"ecr_registration_number": "0000111118041361",	// Регистрационный номер ККТ	(РегистрационныйНомерККТ)
	//		"fiscal_document_attribute": 3449555941			// Фискальный признак документа	(ФискальныйПризнак)
	//	},
	//	"timestamp": "12.04.2017 20:15:08",
	//	"group_code": " MyCompany_MyShop",
	//	"daemon_code": "prod–agent–1",
	//	"device_code": "KSR13.00–1–11",
	//	"external_id": "TRF10601_1",
	//	"callback_url": ""
	//}
	
	ЗначениеPayload = "";
	Если ПолучитьЭлементСтруктуры(СтруктураОтвета, "payload", ЗначениеPayload, "Структура") Тогда
		Результат.Вставить("ДокументОснование", ВиртуальныйЧек);
		Результат.Вставить("ИдентификаторЗаписи", ИдентификаторВиртуальногоЧека);
		Результат.Вставить("Дата", Дата(ЗначениеPayload["receipt_datetime"]));
		Результат.Вставить("Организация", Соединение.Организация);
		Результат.Вставить("ТипДокумента", Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек);
		Результат.Вставить("НомерЧекаККМ", Формат(ЗначениеPayload["fiscal_document_number"], "ЧГ=0"));
		Результат.Вставить("НомерСменыККМ", Формат(ЗначениеPayload["shift_number"], "ЧГ=0"));
		Результат.Вставить("ФискальныйПризнак", Формат(ЗначениеPayload["fiscal_document_attribute"], "ЧГ=0"));
		Результат.Вставить("Сумма", Число(ЗначениеPayload["total"]));
		Результат.Вставить("АдресСайтаПроверки", ЗначениеPayload["fns_site"]);
		Результат.Вставить("ЗаводскойНомерФН", ЗначениеPayload["fn_number"]);
		Результат.Вставить("РегистрационныйНомерККТ", ЗначениеPayload["ecr_registration_number"]);
		Результат.Вставить("ДополнительныйРеквизит", ДополнительныйРеквизит);
		Результат.Вставить("ТипРасчета", ТипРасчета);
		Результат.Вставить("Ошибка", Ложь);
		
		Возврат Результат;
	КонецЕсли;
	
	ЗначениеError = "";
	Если ПолучитьЭлементСтруктуры(СтруктураОтвета, "error", ЗначениеError, "Структура") Тогда
		ШаблонОшибки = НСтр("ru = 'Не удалось обработать Виртуальный чек: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ВиртуальныйЧек));
		ШаблонОшибки = НСтр("ru = 'Текст ошибки: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ЗначениеError["text"]));
		ШаблонОшибки = НСтр("ru = 'Текст ответа сервера: %1'");
		ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, ОтветСтрокой));
		
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРезультатыОбработкиВиртуальныхЧековПоОрганизации(Организация, ИдентификаторНастройки, ОписаниеОшибок)
	
	ОписаниеОшибок = Новый Массив;
	
	ШаблонОшибки = НСтр("ru = 'Ошибка получения результатов обработки виртуальных чеков по организации: %1!'");
	ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Организация));
	
	Соединение = ПодключитьАТОЛОнлайн(ИдентификаторНастройки, Организация, ОписаниеОшибок);
	Если Соединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ,
		|	ФискальныеОперации.ИдентификаторЗаписи КАК Идентификатор,
		|	ФискальныеОперации.ДополнительныйРеквизит КАК ДополнительныйРеквизит,
		|	ФискальныеОперации.ТипРасчета КАК ТипРасчета
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО (ПоступлениеНаРасчетныйСчет.Ссылка = (ВЫРАЗИТЬ(ФискальныеОперации.ДокументОснование КАК Документ.ПоступлениеНаРасчетныйСчет)))
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Дата >= &Дата
		|	И ПоступлениеНаРасчетныйСчет.Проведен
		|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
		|	И ФискальныеОперации.НомерЧекаККМ = 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Соединение.Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = ПолучитьРезультатОбработкиВиртуальногоЧека(
				Выборка.Документ,
				Выборка.Идентификатор,
				Выборка.ДополнительныйРеквизит,
				Выборка.ТипРасчета,
				Соединение,
				ОписаниеОшибок);
		
		Если Результат.Ошибка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьФискальнуюОперацию(Результат);
	КонецЦикла;
	
	// Сообщим об ошибках, если они есть
	Если ОписаниеОшибок.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьНовыйТокенПоОрганизации(Организация, ИдентификаторНастройки, ОписаниеОшибок)
	
	ОписаниеОшибок = Новый Массив;
	
	ШаблонОшибки = НСтр("ru = 'Ошибка создания токена по организации: %1!'");
	ОписаниеОшибок.Добавить(СтрШаблон(ШаблонОшибки, Организация));
	
	// В случаи необходимости, новый Токен будет создан при установке подключения
	Соединение = ПодключитьАТОЛОнлайн(ИдентификаторНастройки, Организация, ОписаниеОшибок);
	Если Соединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОтправитьВиртуальныеЧеки() Экспорт
	
	ОписаниеОшибок = Новый Массив;
	ОписаниеОшибок.Добавить(НСтр("ru = 'Ошибка отправки виртуальных чеков!'"));
	
	СписокНастроекАтолОнлайн = Неопределено;
	Если НЕ ПолучитьНастройкиЗаполнения(СписокНастроекАтолОнлайн, "НастройкиАтолОнлайн", ОписаниеОшибок) Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяНастройка Из СписокНастроекАтолОнлайн Цикл
		Если НЕ ОтправитьВиртуальныеЧекиПоОрганизации(ТекущаяНастройка.Ключ, ТекущаяНастройка.Значение, ОписаниеОшибок) Тогда
			СообщитьОбОшибках(ОписаниеОшибок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьРезультатыОбработкиВиртуальныхЧеков() Экспорт
	
	ОписаниеОшибок = Новый Массив;
	ОписаниеОшибок.Добавить(НСтр("ru = 'Ошибка получения результатов обработки виртуальных чеков!'"));
	
	СписокНастроекАтолОнлайн = Неопределено;
	Если НЕ ПолучитьНастройкиЗаполнения(СписокНастроекАтолОнлайн, "НастройкиАтолОнлайн", ОписаниеОшибок) Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяНастройка Из СписокНастроекАтолОнлайн Цикл
		Если НЕ ПолучитьРезультатыОбработкиВиртуальныхЧековПоОрганизации(ТекущаяНастройка.Ключ, ТекущаяНастройка.Значение, ОписаниеОшибок) Тогда
			СообщитьОбОшибках(ОписаниеОшибок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьНовыеТокены() Экспорт
	
	ОписаниеОшибок = Новый Массив;
	ОписаниеОшибок.Добавить(НСтр("ru = 'Ошибка получения нового токена!'"));
	
	СписокНастроекАтолОнлайн = Неопределено;
	Если НЕ ПолучитьНастройкиЗаполнения(СписокНастроекАтолОнлайн, "НастройкиАтолОнлайн", ОписаниеОшибок) Тогда
		СообщитьОбОшибках(ОписаниеОшибок);
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяНастройка Из СписокНастроекАтолОнлайн Цикл
		Если НЕ ПолучитьНовыйТокенПоОрганизации(ТекущаяНастройка.Ключ, ТекущаяНастройка.Значение, ОписаниеОшибок) Тогда
			СообщитьОбОшибках(ОписаниеОшибок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры