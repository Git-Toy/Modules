
#Область Служебные

&НаСервере
Функция РазрешеныАвансовыеПлатежи(Соединение)
	
	ЗначениеСвойства = Ложь;
	Если НЕ Соединение.Свойство("АвансовыеПлатежи", ЗначениеСвойства) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеСвойства) <> Тип("Булево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеСвойства;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыДокументаНаСервере(ТекущиеДокумент)
	
	Если ЗначениеЗаполнено(ТекущиеДокумент) Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДокумент,
			"Контрагент, НазначениеПлатежа, СуммаДокумента");
	Иначе
		РеквизитыДокумента = Новый Структура;
		РеквизитыДокумента.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		РеквизитыДокумента.Вставить("НазначениеПлатежа", "");
		РеквизитыДокумента.Вставить("СуммаДокумента", 0);
	КонецЕсли;
	
	Возврат РеквизитыДокумента;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииДокумента(ИмяТабличнойЧасти)
	
	ТекущиеДанные = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураРеквизитов = ПолучитьРеквизитыДокументаНаСервере(ТекущиеДанные.Документ);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометкиВыгрузкиДокумента(ИмяТабличнойЧасти, ЗначениеПометки)
	
	ТабличнаяЧасть = ЭтаФорма[ИмяТабличнойЧасти];
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		СтрокаТаблицы.Пометка = ЗначениеПометки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьПометкиВыгрузкиДокумента(ИмяТабличнойЧасти)
	
	ТабличнаяЧасть = ЭтаФорма[ИмяТабличнойЧасти];
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		СтрокаТаблицы.Пометка = НЕ СтрокаТаблицы.Пометка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Общие

&НаСервере
Процедура ОтправитьВиртуальныеЧекиНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОтправитьВиртуальныеЧеки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВиртуальныеЧеки(Команда)
	
	ОтправитьВиртуальныеЧекиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРезультатыОбработкиЧековНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПолучитьРезультатыОбработкиВиртуальныхЧеков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатыОбработкиЧеков(Команда)
	
	ПолучитьРезультатыОбработкиЧековНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНовыеТокеныНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПолучитьНовыеТокены();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеТокены(Команда)
	
	ПолучитьНовыеТокеныНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыНаПолныйРасчет

&НаКлиенте
Процедура ДокументыНаПолныйРасчетДокументПриИзменении(Элемент)
	
	ПриИзмененииДокумента("ДокументыНаПолныйРасчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаПолныйРасчетУстановитьПометки(Команда)
	
	УстановитьСнятьПометкиВыгрузкиДокумента("ДокументыНаПолныйРасчет", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаПолныйРасчетСнятьПометки(Команда)
	
	УстановитьСнятьПометкиВыгрузкиДокумента("ДокументыНаПолныйРасчет", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаПолныйРасчетПоменятьПометки(Команда)
	
	ПоменятьПометкиВыгрузкиДокумента("ДокументыНаПолныйРасчет");
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаПолныйРасчетЗаполнитьНаСервере()
	
	Попытка
		НастройкаАтолОнлайн = Справочники.сакс_НастройкиЗаполнения.ПолучитьДанныеНастройки("НастройкиАтолОнлайн");
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка получения настройки ""НастройкиАтолОнлайн"". Описание ошибки: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	НастройкаАтолОнлайнПоОрганизации = НастройкаАтолОнлайн.Получить(Организация);
	Если НастройкаАтолОнлайнПоОрганизации = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Организация: %1 не найдена в настройках ""НастройкиАтолОнлайн""'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение = Справочники.сакс_НастройкиЗаполнения.ПолучитьДанныеНастройки(НастройкаАтолОнлайнПоОрганизации);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка получения настройки ""%1"". Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, НастройкаАтолОнлайнПоОрганизации, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Если РазрешеныАвансовыеПлатежи(Соединение) Тогда
		ШаблонСообщения = НСтр("ru = 'Для организации: %1 не разрешен полный расчет, только авансовые платежи!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ,
	|	ПоступлениеНаРасчетныйСчет.Контрагент КАК Контрагент,
	|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК СуммаДокумента,
	|	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникКонтрагенты
	|		ПО ПоступлениеНаРасчетныйСчет.Контрагент = СправочникКонтрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО (ПоступлениеНаРасчетныйСчет.Ссылка = (ВЫРАЗИТЬ(ФискальныеОперации.ДокументОснование КАК Документ.ПоступлениеНаРасчетныйСчет)))
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Дата >= &Дата
	|	И ПоступлениеНаРасчетныйСчет.Проведен
	|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
	|	И СправочникКонтрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И СправочникКонтрагенты.сакс_ИндивидуальныйПредприниматель = ЛОЖЬ
	|	И СправочникКонтрагенты.РегистрационныйНомер = """"
	|	И ФискальныеОперации.Дата ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеНаРасчетныйСчет.Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Соединение.Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ДокументыНаПолныйРасчет.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаПолныйРасчетЗаполнить(Команда)
	
	ДокументыНаПолныйРасчетЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаПолныйРасчетОтправитьНаСервере()
	
	СписокДокументовМассив = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДокументыНаПолныйРасчет Цикл
		Если СтрокаТаблицы.Пометка Тогда
			СписокДокументовМассив.Добавить(СтрокаТаблицы.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокДокументовМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОтправитьСписокВиртуальныхЧековПоОрганизации(Организация, СписокДокументовМассив, "ПолныйРасчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаПолныйРасчетОтправить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ДокументыНаПолныйРасчетОтправитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыНаАванс

&НаКлиенте
Процедура ДокументыНаАвансДокументПриИзменении(Элемент)
	
	ПриИзмененииДокумента("ДокументыНаАванс");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаАвансУстановитьПометки(Команда)
	
	УстановитьСнятьПометкиВыгрузкиДокумента("ДокументыНаАванс", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаАвансСнятьПометки(Команда)
	
	УстановитьСнятьПометкиВыгрузкиДокумента("ДокументыНаАванс", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаАвансПоменятьПометки(Команда)
	
	ПоменятьПометкиВыгрузкиДокумента("ДокументыНаАванс");
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаАвансЗаполнитьНаСервере()
	
	Попытка
		НастройкаАтолОнлайн = Справочники.сакс_НастройкиЗаполнения.ПолучитьДанныеНастройки("НастройкиАтолОнлайн");
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка получения настройки ""НастройкиАтолОнлайн"". Описание ошибки: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	НастройкаАтолОнлайнПоОрганизации = НастройкаАтолОнлайн.Получить(Организация);
	Если НастройкаАтолОнлайнПоОрганизации = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Организация: %1 не найдена в настройках ""НастройкиАтолОнлайн""'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение = Справочники.сакс_НастройкиЗаполнения.ПолучитьДанныеНастройки(НастройкаАтолОнлайнПоОрганизации);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка получения настройки ""%1"". Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, НастройкаАтолОнлайнПоОрганизации, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Если НЕ РазрешеныАвансовыеПлатежи(Соединение) Тогда
		ШаблонСообщения = НСтр("ru = 'Для организации: %1 не разрешены авансовые платежи!'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ,
	|	ПоступлениеНаРасчетныйСчет.Контрагент КАК Контрагент,
	|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК СуммаДокумента,
	|	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникКонтрагенты
	|		ПО ПоступлениеНаРасчетныйСчет.Контрагент = СправочникКонтрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО (ПоступлениеНаРасчетныйСчет.Ссылка = (ВЫРАЗИТЬ(ФискальныеОперации.ДокументОснование КАК Документ.ПоступлениеНаРасчетныйСчет)))
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Дата >= &Дата
	|	И ПоступлениеНаРасчетныйСчет.Проведен
	|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
	|	И СправочникКонтрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И СправочникКонтрагенты.сакс_ИндивидуальныйПредприниматель = ЛОЖЬ
	|	И СправочникКонтрагенты.РегистрационныйНомер = """"
	|	И ФискальныеОперации.Дата ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеНаРасчетныйСчет.Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Соединение.Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ДокументыНаАванс.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаАвансЗаполнить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ДокументыНаАвансЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаАвансОтправитьНаСервере()
	
	СписокДокументовМассив = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДокументыНаАванс Цикл
		Если СтрокаТаблицы.Пометка Тогда
			СписокДокументовМассив.Добавить(СтрокаТаблицы.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокДокументовМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОтправитьСписокВиртуальныхЧековПоОрганизации(Организация, СписокДокументовМассив, "Аванс");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаАвансОтправить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ДокументыНаАвансОтправитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыНаВозврат

&НаКлиенте
Процедура ДокументыНаВозвратДокументПриИзменении(Элемент)
	
	ПриИзмененииДокумента("ДокументыНаВозврат");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаВозвратУстановитьПометки(Команда)
	
	УстановитьСнятьПометкиВыгрузкиДокумента("ДокументыНаВозврат", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаВозвратСнятьПометки(Команда)
	
	УстановитьСнятьПометкиВыгрузкиДокумента("ДокументыНаВозврат", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаВозвратПоменятьПометки(Команда)
	
	ПоменятьПометкиВыгрузкиДокумента("ДокументыНаВозврат");
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаВозвратЗаполнитьНаСервере()
	
	// !!	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаВозвратЗаполнить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ДокументыНаВозвратЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаВозвратОтправитьНаСервере()
	
	СписокДокументовМассив = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДокументыНаВозврат Цикл
		Если СтрокаТаблицы.Пометка Тогда
			СписокДокументовМассив.Добавить(СтрокаТаблицы.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокДокументовМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОтправитьСписокВиртуальныхЧековНаВозвратПоОрганизации(Организация, СписокДокументовМассив);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаВозвратОтправить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ДокументыНаВозвратОтправитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыНаЗачетАванса

&НаКлиенте
Процедура ДокументыНаЗачетАвансаДокументПриИзменении(Элемент)
	
	ПриИзмененииДокумента("ДокументыНаЗачетАванса");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЗачетАвансаУстановитьПометки(Команда)
	
	УстановитьСнятьПометкиВыгрузкиДокумента("ДокументыНаЗачетАванса", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЗачетАвансаСнятьПометки(Команда)
	
	УстановитьСнятьПометкиВыгрузкиДокумента("ДокументыНаЗачетАванса", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЗачетАвансаПоменятьПометки(Команда)
	
	ПоменятьПометкиВыгрузкиДокумента("ДокументыНаЗачетАванса");
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаЗачетАвансаЗаполнитьНаСервере()
	
	Попытка
		ДополнительныеНастройки = Справочники.сакс_НастройкиЗаполнения.ПолучитьДанныеНастройки("НастройкиАтолОнлайнДопСвойства");
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка получения настройки ""НастройкиАтолОнлайнДопСвойства"". Описание ошибки: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Документ,
	|	ПоступлениеНаРасчетныйСчет.Контрагент КАК Контрагент,
	|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК СуммаДокумента,
	|	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ПО ДополнительныеСведения.Объект = ПоступлениеНаРасчетныйСчет.Ссылка
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Значение = &Аванс
	|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеНаРасчетныйСчет.Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Свойство", ДополнительныеНастройки.Свойство);
	Запрос.УстановитьПараметр("Аванс", ДополнительныеНастройки.Аванс);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ДокументыНаЗачетАванса.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЗачетАвансаЗаполнить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ДокументыНаЗачетАвансаЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаЗачетАвансаОтправитьНаСервере()
	
	СписокДокументовМассив = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДокументыНаЗачетАванса Цикл
		Если СтрокаТаблицы.Пометка Тогда
			СписокДокументовМассив.Добавить(СтрокаТаблицы.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокДокументовМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОтправитьСписокВиртуальныхЧековНаЗачетАвансаПоОрганизации(Организация, СписокДокументовМассив);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЗачетАвансаОтправить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ДокументыНаЗачетАвансаОтправитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
