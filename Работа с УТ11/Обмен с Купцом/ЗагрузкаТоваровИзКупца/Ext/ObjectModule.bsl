// BSLLS:UsingObjectNotAvailableUnix-off

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Наименование = ЭтотОбъект.Метаданные().Синоним;
	ПараметрыРегистрации.Информация = ЭтотОбъект.Метаданные().Комментарий;
	ПараметрыРегистрации.Версия = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.Представление = ПараметрыРегистрации.Наименование;
	НоваяКоманда.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗагрузитьНоменклатуруИзКупца(Параметры, АдресРезультата) Экспорт
	
	ОжидатьЗапускПрогресса();
	
	СтруктураЕдиницИзмерений = Неопределено;
	Если Не ЗагрузитьЕдиницыИзмерения(СтруктураЕдиницИзмерений) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСвойствНоменклатуры = Неопределено;
	Если Не ЗагрузитьСвойстваНоменклаутры(СтруктураСвойствНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = Неопределено;
	Если Не УстановитьСоединениеССервером(Соединение, Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗагрузитьСтраныМира(Соединение) Тогда
		Соединение.Close();
		Возврат;
	КонецЕсли;
	
	Если Не ЗагрузитьПроизводителей(Соединение) Тогда
		Соединение.Close();
		Возврат;
	КонецЕсли;
	
	Если Не ЗагрузитьМаркиБренды(Соединение) Тогда
		Соединение.Close();
		Возврат;
	КонецЕсли;
	
	Если Не ЗагрузитьНоменклатурныеГруппыПервогоУровня(Соединение) Тогда
		Соединение.Close();
		Возврат;
	КонецЕсли;
	
	Если Не ЗагрузитьНоменклатурныеГруппыВторогоУровня(Соединение) Тогда
		Соединение.Close();
		Возврат;
	КонецЕсли;
	
	Если Не ЗагрузитьВидыНоменклатуры(Соединение) Тогда
		Соединение.Close();
		Возврат;
	КонецЕсли;
	
	Если Не ЗагрузитьНоменклатурныеПозиции(Соединение, СтруктураЕдиницИзмерений, СтруктураСвойствНоменклатуры) Тогда
		Соединение.Close();
		Возврат;
	КонецЕсли;
	
	Соединение.Close();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииРаботыСПрогрессом

Функция ИнициализироватьПрогресс(КоличествоЭлементов, Текст = "")
	
	КоличествоПараметровДляПрогресса = 2;
	КоличествоПараметровВТексте = СтрЧислоВхождений(Текст, "%");
	ТекстСодержитПрогресс = КоличествоПараметровВТексте = КоличествоПараметровДляПрогресса;
	КоличествоЭлементовСтрокой = Формат(КоличествоЭлементов, "ЧДЦ=; ЧН=0; ЧГ=0");
	
	ПараметрыПрогресса = Новый Структура;
	ПараметрыПрогресса.Вставить("ТекущееПоложениеПрогресса", 0);
	ПараметрыПрогресса.Вставить("ПредыдущийПроцентВыполнения", 0);
	ПараметрыПрогресса.Вставить("КоличествоЭлементов", КоличествоЭлементов);
	ПараметрыПрогресса.Вставить("КоличествоЭлементовСтрокой", КоличествоЭлементовСтрокой);
	ПараметрыПрогресса.Вставить("ТекстСодержитПрогресс", ТекстСодержитПрогресс);
	ПараметрыПрогресса.Вставить("Текст", Текст);
	
	Возврат ПараметрыПрогресса;
	
КонецФункции

Процедура ИзменитьПрогресс(ПараметрыПрогресса)
	
	СтоПроцентов = 100;
	ПараметрыПрогресса.ТекущееПоложениеПрогресса = ПараметрыПрогресса.ТекущееПоложениеПрогресса + 1;
	ПроцентВыполнения = ПараметрыПрогресса.ТекущееПоложениеПрогресса / ПараметрыПрогресса.КоличествоЭлементов;
	ПроцентВыполнения = Окр(СтоПроцентов * ПроцентВыполнения, 0);
	
	Если ПараметрыПрогресса.ПредыдущийПроцентВыполнения <> ПроцентВыполнения Тогда
		ТекстПрогресса = ПараметрыПрогресса.Текст;
		
		Если ПараметрыПрогресса.ТекстСодержитПрогресс Тогда
			КоличествоЭлементовСтрокой = ПараметрыПрогресса.КоличествоЭлементовСтрокой;
			ТекущееПоложениеПрогрессаСтрокой = Формат(ПараметрыПрогресса.ТекущееПоложениеПрогресса, "ЧДЦ=; ЧН=0; ЧГ=0");
			ТекстПрогресса = СтрШаблон(ТекстПрогресса, ТекущееПоложениеПрогрессаСтрокой, КоличествоЭлементовСтрокой);
		КонецЕсли;
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстПрогресса);
		ПараметрыПрогресса.ПредыдущийПроцентВыполнения = ПроцентВыполнения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОжидатьЗапускПрогресса()
	
	// Назначение данной процедуры заключается в ожидании открытия окна прогресса.
	// Сообщения выведенные пользователю до открытия окна прогресса показаны не будут.
	ОбщегоНазначенияБТС.Пауза(1);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииЗагрузкиДанных

Функция УстановитьСоединениеССервером(Соединение, Параметры)
	
	ШаблонСтрокиПодключения =
		"Provider=OraOLEDB.Oracle.1;
		|Password=%1;
		|Persist Security Info=True;
		|User ID=%2;
		|Data Source=%3";
	
	Пароль = Параметры.Пароль;
	Пользователь = Параметры.Пользователь;
	ИсточникДанных = Параметры.ИсточникДанных;
	СтрокаПодключения = СтрШаблон(ШаблонСтрокиПодключения, Пароль, Пользователь, ИсточникДанных);
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.ConnectionString = СтрокаПодключения;
	Соединение.CursorLocation = 3;
	Соединение.ConnectionTimeOut = 20;
	Соединение.CommandTimeout = 20;
	
	Попытка
		Соединение.Open();
	Исключение
		ШаблонОшибки = НСтр("ru = 'Не удалось подключиться к сервер!%1%2'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОписаниеТипаСтроки(ДлинаСтроки)
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
	
	Возврат ОписаниеТипаСтрока;
	
КонецФункции

Функция ПолучитьОписаниеТипаЧисла(ДлинаЧисла, ТочностьЧисла)
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(ДлинаЧисла, ТочностьЧисла);
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
	Возврат ОписаниеТипаЧисла;
	
КонецФункции

Функция ПолучитьТипКолонки(ПараметрыПоля)
	
	МассивТиповСтрока = Новый Массив;
	МассивТиповСтрока.Добавить(202);
	
	Если МассивТиповСтрока.Найти(ПараметрыПоля.Type) <> Неопределено Тогда
		ОписаниеТипаСтрока = ПолучитьОписаниеТипаСтроки(ПараметрыПоля.DefinedSize);
		Возврат ОписаниеТипаСтрока;
	КонецЕсли;
	
	МассивТиповЧисло = Новый Массив;
	МассивТиповЧисло.Добавить(131);
	МассивТиповЧисло.Добавить(139);
	
	Если МассивТиповЧисло.Найти(ПараметрыПоля.Type) <> Неопределено Тогда
		ОписаниеТипаЧисла = ПолучитьОписаниеТипаЧисла(15, 4);
		Возврат ОписаниеТипаЧисла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТаблицуЗагрузки(Выборка)
	
	ТаблицЗагрузки = Новый ТаблицаЗначений;
	СписокПолей = Выборка.Fields;
	МассивИменПолей = Новый Массив;
	
	Для ИндексПоля = 0 По СписокПолей.Count - 1 Цикл
		ПараметрыПоля = СписокПолей.Item(ИндексПоля);
		ИмяКолонки = ПараметрыПоля.Name;
		ТипКолонки = ПолучитьТипКолонки(ПараметрыПоля);
		ТаблицЗагрузки.Колонки.Добавить(ИмяКолонки, ТипКолонки);
		МассивИменПолей.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Пока Не Выборка.Eof() Цикл
		НоваяСтрока = ТаблицЗагрузки.Добавить();
		
		Для Каждого ИмяПоля Из МассивИменПолей Цикл
			ЗначениеПоля = Выборка.Fields(ИмяПоля).Value;
			НоваяСтрока[ИмяПоля] = ЗначениеПоля;
		КонецЦикла;
		
		Выборка.MoveNext();
	КонецЦикла;
	
	Возврат ТаблицЗагрузки;
	
КонецФункции

Функция ПолучитьДополнительноеСвойство(ДопСвойство, ИмяСвойства)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДопСвойства.Ссылка КАК Свойство
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДопСвойства
		|ГДЕ
		|	ДопСвойства.Имя = &ИмяСвойства";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяСвойства", ИмяСвойства);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДопСвойство = Выборка.Свойство;
		Возврат Истина;
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'Дополнительное сведение с наименованием: ""%1"" не найдено!'");
	ТекстОшибки = СтрШаблон(ШаблонОшибки, ИмяСвойства);
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	Возврат Ложь;
	
КонецФункции

Процедура ЗаписатьДопСвойство(Объект, Свойство, Значение)
	
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Свойство = Свойство;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ЗаписатьДопРеквизит(Объект, Свойство, Значение)
	
	ДополнительныеРеквизиты = Объект.ДополнительныеРеквизиты;
	НайденнаяСтрока = ДополнительныеРеквизиты.Найти(Свойство, "Свойство");
	
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ДополнительныеРеквизиты.Добавить();
		НайденнаяСтрока.Свойство = Свойство;
	КонецЕсли;
	
	НайденнаяСтрока.Значение = Значение;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		НайденнаяСтрока.ТекстоваяСтрока = Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИдентификатор(Объект, ВидИдентификатора, Идентификатор)
	
	МенеджерЗаписи = РегистрыСведений.сакс_ИдентификаторыОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВидИдентификатора = ВидИдентификатора;
	МенеджерЗаписи.Идентификатор = Идентификатор;
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ЗаписатьШтрихкод(Номенклатура, Штрихкод)
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Штрихкод = Штрихкод;
	МенеджерЗаписи.Номенклатура = Номенклатура;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииЗагрузкиСправочников

Функция ЗагрузитьЕдиницыИзмерения(СтруктураЕдиницИзмерений)
	
	ОписаниеТипаСтрока = ПолучитьОписаниеТипаСтроки(30);
	ТаблицаЕдиницИзмерения = Новый ТаблицаЗначений;
	ТаблицаЕдиницИзмерения.Колонки.Добавить("КодЕдиницы", ОписаниеТипаСтрока);
	ТаблицаЕдиницИзмерения.Колонки.Добавить("ИмяПараметра", ОписаниеТипаСтрока);
	
	НоваяСтрока = ТаблицаЕдиницИзмерения.Добавить();
	НоваяСтрока.КодЕдиницы = "796";
	НоваяСтрока.ИмяПараметра = "ЕдиницаИзмеренияШтук";
	
	НоваяСтрока = ТаблицаЕдиницИзмерения.Добавить();
	НоваяСтрока.КодЕдиницы = "163";
	НоваяСтрока.ИмяПараметра = "ЕдиницаИзмеренияВеса";
	
	// Создадим отсутствующие единицы измерения
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаЕдиницИзмерения.КодЕдиницы КАК КодЕдиницы,
		|	ТаблицаЕдиницИзмерения.ИмяПараметра КАК ИмяПараметра
		|ПОМЕСТИТЬ ТаблицаЕдиницИзмерения
		|ИЗ
		|	&ТаблицаЕдиницИзмерения КАК ТаблицаЕдиницИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЕдиницИзмерения.КодЕдиницы КАК КодЕдиницы
		|ИЗ
		|	ТаблицаЕдиницИзмерения КАК ТаблицаЕдиницИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ТаблицаЕдиницИзмерения.КодЕдиницы = ЕдиницыИзмерения.Код
		|ГДЕ
		|	ЕдиницыИзмерения.Ссылка ЕСТЬ NULL";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаЕдиницИзмерения", ТаблицаЕдиницИзмерения);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		МассивКодов = Результат.Выгрузить().ВыгрузитьКолонку("КодЕдиницы");
		СписокКодов = СтрСоединить(МассивКодов, ",");
		Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(СписокКодов);
	КонецЕсли;
	
	// Загрузим структуру единиц измерений
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерений,
		|	ТаблицаЕдиницИзмерения.КодЕдиницы КАК КодЕдиницы,
		|	ТаблицаЕдиницИзмерения.ИмяПараметра КАК ИмяПараметра
		|ИЗ
		|	ТаблицаЕдиницИзмерения КАК ТаблицаЕдиницИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ТаблицаЕдиницИзмерения.КодЕдиницы = ЕдиницыИзмерения.Код";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураЕдиницИзмерений = Новый Структура;
	ОшибкиЗагрузкиОтсутствуют = Истина;
	
	Пока Выборка.Следующий() Цикл
		ЕдиницаИзмерений = Выборка.ЕдиницаИзмерений;
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерений) Тогда
			ШаблонОшибки = НСтр("ru = 'Единица измерения с кодом: ""%1"" не найдена!'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Выборка.КодЕдиницы);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОшибкиЗагрузкиОтсутствуют = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтруктураЕдиницИзмерений.Вставить(Выборка.ИмяПараметра, ЕдиницаИзмерений);
	КонецЦикла;
	
	Возврат ОшибкиЗагрузкиОтсутствуют;
	
КонецФункции

Функция ЗагрузитьСвойстваНоменклаутры(СтруктураСвойствНоменклатуры)
	
	ОписаниеТипаСтрока = ПолучитьОписаниеТипаСтроки(50);
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("ИмяСвойства", ОписаниеТипаСтрока);
	ТаблицаСвойств.Колонки.Добавить("ИмяПараметра", ОписаниеТипаСтрока);
	
	НоваяСтрока = ТаблицаСвойств.Добавить();
	НоваяСтрока.ИмяСвойства = "СтранаПроизводитель";
	НоваяСтрока.ИмяПараметра = "СвойствоСтранаПроизводитель";
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСвойств.ИмяСвойства КАК ИмяСвойства,
		|	ТаблицаСвойств.ИмяПараметра КАК ИмяПараметра
		|ПОМЕСТИТЬ ТаблицаСвойств
		|ИЗ
		|	&ТаблицаСвойств КАК ТаблицаСвойств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеСвойства.Ссылка КАК Свойство,
		|	ТаблицаСвойств.ИмяСвойства КАК ИмяСвойства,
		|	ТаблицаСвойств.ИмяПараметра КАК ИмяПараметра
		|ИЗ
		|	ТаблицаСвойств КАК ТаблицаСвойств
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеСвойства
		|		ПО ТаблицаСвойств.ИмяСвойства = ДополнительныеСвойства.Имя";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаСвойств", ТаблицаСвойств);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураСвойствНоменклатуры = Новый Структура;
	ОшибкиЗагрузкиОтсутствуют = Истина;
	
	Пока Выборка.Следующий() Цикл
		Свойство = Выборка.Свойство;
		
		Если НЕ ЗначениеЗаполнено(Свойство) Тогда
			ШаблонОшибки = НСтр("ru = 'Дополнительный реквизит с именем: ""%1"" не найден!'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Выборка.ИмяСвойства);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОшибкиЗагрузкиОтсутствуют = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтруктураСвойствНоменклатуры.Вставить(Выборка.ИмяПараметра, Свойство);
	КонецЦикла;
	
	Возврат ОшибкиЗагрузкиОтсутствуют;
	
КонецФункции

Функция ЗагрузитьСтраныМира(Соединение)
	
	ТекстЗапроса =
		"SELECT
		|    to_char(country_code) AS code,
		|    substr('000' || international_code, - 3) AS international_code,
		|    country_name AS name,
		|    iso_code_2,
		|    iso_code_3
		|FROM
		|    countries";
	
	Попытка
		Выборка = Соединение.Execute(ТекстЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения стран мира:%1%2%1%3'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, ТекстЗапроса, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ТаблицаСтран = ПолучитьТаблицуЗагрузки(Выборка);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСтран.code КАК Идентификатор,
		|	ТаблицаСтран.international_code КАК Код,
		|	ТаблицаСтран.name КАК Наименование,
		|	ТаблицаСтран.iso_code_2 КАК КодАльфа2,
		|	ТаблицаСтран.iso_code_3 КАК КодАльфа3
		|ПОМЕСТИТЬ ТаблицаСтран
		|ИЗ
		|	&ТаблицаСтран КАК ТаблицаСтран
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСтран.Идентификатор КАК Идентификатор,
		|	ТаблицаСтран.Код КАК Код,
		|	ТаблицаСтран.Наименование КАК Наименование,
		|	ТаблицаСтран.КодАльфа2 КАК КодАльфа2,
		|	ТаблицаСтран.КодАльфа3 КАК КодАльфа3,
		|	"""" КАК НаименованиеПолное,
		|	ЛОЖЬ КАК УчастникЕАЭС
		|ИЗ
		|	ТаблицаСтран КАК ТаблицаСтран
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
		|		ПО ТаблицаСтран.Код = СтраныМира.Код
		|ГДЕ
		|	СтраныМира.Ссылка ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаСтран", ТаблицаСтран);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонПрогресса = НСтр("ru = 'Загрузка стран мира: %1 из: %2'");
	ПараметрыПрогресса = ИнициализироватьПрогресс(Выборка.Количество(), ШаблонПрогресса);
	
	ВидИдентификатора = Перечисления.сакс_ВидыИдентификаторов.КодСтраныПроизводителя;
	ОшибкиЗагрузкиОтсутствуют = Истина;
	
	Пока Выборка.Следующий() Цикл
		ИзменитьПрогресс(ПараметрыПрогресса);
		
		ДанныеСтраны = УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду(Выборка.Код);
		Если ДанныеСтраны = Неопределено Тогда
			ДанныеСтраны = Выборка;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			СтранаОбъект = Справочники.СтраныМира.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СтранаОбъект, ДанныеСтраны);
			СтранаОбъект.Записать();
			
			ЗаписатьИдентификатор(СтранаОбъект.Ссылка, ВидИдентификатора, Выборка.Идентификатор);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонОшибки = НСтр("ru = 'Ошибка записи страны мира:%1%2 (%3) %1%4'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, Выборка.Наименование, Выборка.Код, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОшибкиЗагрузкиОтсутствуют = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ОшибкиЗагрузкиОтсутствуют;
	
КонецФункции

Функция ЗагрузитьПроизводителей(Соединение)
	
	ТекстЗапроса =
		"SELECT
		|    to_char(company_producer_code) AS code,
		|    company_producer_name AS name
		|FROM
		|    company_producers";
	
	Попытка
		Выборка = Соединение.Execute(ТекстЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения производителей:%1%2%1%3'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, ТекстЗапроса, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ТаблицаПроизводителей = ПолучитьТаблицуЗагрузки(Выборка);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаПроизводителей.code КАК Идентификатор,
		|	ТаблицаПроизводителей.name КАК Наименование
		|ПОМЕСТИТЬ ТаблицаПроизводителей
		|ИЗ
		|	&ТаблицаПроизводителей КАК ТаблицаПроизводителей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыПроизводителей.Объект КАК Производитель,
		|	ТаблицаПроизводителей.Идентификатор КАК Идентификатор,
		|	ТаблицаПроизводителей.Наименование КАК Наименование
		|ИЗ
		|	ТаблицаПроизводителей КАК ТаблицаПроизводителей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыПроизводителей
		|		ПО ТаблицаПроизводителей.Идентификатор = КодыПроизводителей.Идентификатор
		|			И (КодыПроизводителей.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодПроизодителя))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Производители КАК Производители
		|		ПО (КодыПроизводителей.Объект = Производители.Ссылка)
		|ГДЕ
		|	ТаблицаПроизводителей.Наименование <> ЕСТЬNULL(Производители.Наименование, """")";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПроизводителей", ТаблицаПроизводителей);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонПрогресса = НСтр("ru = 'Загрузка производителей: %1 из: %2'");
	ПараметрыПрогресса = ИнициализироватьПрогресс(Выборка.Количество(), ШаблонПрогресса);
	
	ВидИдентификатора = Перечисления.сакс_ВидыИдентификаторов.КодПроизодителя;
	ОшибкиЗагрузкиОтсутствуют = Истина;
	
	Пока Выборка.Следующий() Цикл
		ИзменитьПрогресс(ПараметрыПрогресса);
		
		ПроизводительСсылка = Выборка.Производитель;
		Если ЗначениеЗаполнено(ПроизводительСсылка) Тогда
			ПроизводительОбъект = ПроизводительСсылка.ПолучитьОбъект();
			ЗаписыватьИдентификатор = Ложь;
		Иначе
			ПроизводительОбъект = Справочники.Производители.СоздатьЭлемент();
			ЗаписыватьИдентификатор = Истина;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			ЗаполнитьЗначенияСвойств(ПроизводительОбъект, Выборка);
			ПроизводительОбъект.Записать();
			
			Если ЗаписыватьИдентификатор Тогда
				ЗаписатьИдентификатор(ПроизводительОбъект.Ссылка, ВидИдентификатора, Выборка.Идентификатор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонОшибки = НСтр("ru = 'Ошибка записи производителя:%1%2 (%3) %1%4'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, Выборка.Наименование, Выборка.Идентификатор, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОшибкиЗагрузкиОтсутствуют = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ОшибкиЗагрузкиОтсутствуют;
	
КонецФункции

Функция ЗагрузитьМаркиБренды(Соединение)
	
	ТекстЗапроса =
		"SELECT
		|    to_char(producers.producer_code) AS code,
		|    producers.producer_name AS name,
		|    to_char(producers.company_producer_code) AS company_producer_code
		|FROM
		|    producers
		|    INNER JOIN goods ON producers.producer_code = goods.producer_code
		|GROUP BY
		|    producers.producer_code,
		|    producers.producer_name,
		|    producers.company_producer_code";
	
	Попытка
		Выборка = Соединение.Execute(ТекстЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения марок/брендов:%1%2%1%3'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, ТекстЗапроса, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ТаблицаБрендов = ПолучитьТаблицуЗагрузки(Выборка);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаБрендов.code КАК Идентификатор,
		|	ТаблицаБрендов.name КАК Наименование,
		|	ТаблицаБрендов.company_producer_code КАК КодПроизводителя
		|ПОМЕСТИТЬ ТаблицаБрендов
		|ИЗ
		|	&ТаблицаБрендов КАК ТаблицаБрендов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыБрендов.Объект КАК Бренд,
		|	ТаблицаБрендов.Идентификатор КАК Идентификатор,
		|	ТаблицаБрендов.Наименование КАК Наименование,
		|	КодыПроизводителей.Объект КАК Производитель
		|ИЗ
		|	ТаблицаБрендов КАК ТаблицаБрендов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыБрендов
		|		ПО ТаблицаБрендов.Идентификатор = КодыБрендов.Идентификатор
		|			И (КодыБрендов.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодБренда))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Марки КАК МаркиБренды
		|		ПО (КодыБрендов.Объект = МаркиБренды.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыПроизводителей
		|		ПО ТаблицаБрендов.КодПроизводителя = КодыПроизводителей.Идентификатор
		|			И (КодыПроизводителей.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодПроизодителя))
		|ГДЕ
		|	НЕ(ТаблицаБрендов.Наименование = ЕСТЬNULL(МаркиБренды.Наименование, """")
		|				И ЕСТЬNULL(КодыПроизводителей.Объект, ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) = ЕСТЬNULL(МаркиБренды.Производитель, ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаБрендов", ТаблицаБрендов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонПрогресса = НСтр("ru = 'Загрузка марок/брендов: %1 из: %2'");
	ПараметрыПрогресса = ИнициализироватьПрогресс(Выборка.Количество(), ШаблонПрогресса);
	
	ВидИдентификатора = Перечисления.сакс_ВидыИдентификаторов.КодБренда;
	ОшибкиЗагрузкиОтсутствуют = Истина;
	
	Пока Выборка.Следующий() Цикл
		ИзменитьПрогресс(ПараметрыПрогресса);
		
		БрендСсылка = Выборка.Бренд;
		Если ЗначениеЗаполнено(БрендСсылка) Тогда
			БрендОбъект = БрендСсылка.ПолучитьОбъект();
			ЗаписыватьИдентификатор = Ложь;
		Иначе
			БрендОбъект = Справочники.Марки.СоздатьЭлемент();
			ЗаписыватьИдентификатор = Истина;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			ЗаполнитьЗначенияСвойств(БрендОбъект, Выборка);
			БрендОбъект.Записать();
			
			Если ЗаписыватьИдентификатор Тогда
				ЗаписатьИдентификатор(БрендОбъект.Ссылка, ВидИдентификатора, Выборка.Идентификатор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонОшибки = НСтр("ru = 'Ошибка записи марки/бренда:%1%2 (%3) %1%4'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, Выборка.Наименование, Выборка.Идентификатор, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОшибкиЗагрузкиОтсутствуют = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ОшибкиЗагрузкиОтсутствуют;
	
КонецФункции

Функция ЗагрузитьНоменклатурныеГруппыПервогоУровня(Соединение)
	
	ТекстЗапроса =
		"SELECT
		|    to_char(group_code) AS code,
		|    group_name AS name
		|FROM
		|    goods_group";
	
	Попытка
		Выборка = Соединение.Execute(ТекстЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения номенклатурных групп первого уровня:%1%2%1%3'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, ТекстЗапроса, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ТаблицаГрупп = ПолучитьТаблицуЗагрузки(Выборка);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаГрупп.code КАК Идентификатор,
		|	ТаблицаГрупп.name КАК Наименование
		|ПОМЕСТИТЬ ТаблицаГрупп
		|ИЗ
		|	&ТаблицаГрупп КАК ТаблицаГрупп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыГрупп.Объект КАК Группа,
		|	ТаблицаГрупп.Идентификатор КАК Идентификатор,
		|	ТаблицаГрупп.Наименование КАК Наименование
		|ИЗ
		|	ТаблицаГрупп КАК ТаблицаГрупп
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыГрупп
		|		ПО ТаблицаГрупп.Идентификатор = КодыГрупп.Идентификатор
		|			И (КодыГрупп.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодГруппы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатурныеГруппы
		|		ПО (КодыГрупп.Объект = НоменклатурныеГруппы.Ссылка)
		|ГДЕ
		|	ТаблицаГрупп.Наименование <> ЕСТЬNULL(НоменклатурныеГруппы.Наименование, """")";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаГрупп", ТаблицаГрупп);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонПрогресса = НСтр("ru = 'Загрузка групп первого уровня: %1 из: %2'");
	ПараметрыПрогресса = ИнициализироватьПрогресс(Выборка.Количество(), ШаблонПрогресса);
	
	ВидИдентификатора = Перечисления.сакс_ВидыИдентификаторов.КодГруппы;
	ОшибкиЗагрузкиОтсутствуют = Истина;
	
	Пока Выборка.Следующий() Цикл
		ИзменитьПрогресс(ПараметрыПрогресса);
		
		ГруппаСсылка = Выборка.Группа;
		Если ЗначениеЗаполнено(ГруппаСсылка) Тогда
			ГруппаОбъект = ГруппаСсылка.ПолучитьОбъект();
			ЗаписыватьИдентификатор = Ложь;
		Иначе
			ГруппаОбъект = Справочники.Номенклатура.СоздатьГруппу();
			ЗаписыватьИдентификатор = Истина;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			ЗаполнитьЗначенияСвойств(ГруппаОбъект, Выборка);
			ГруппаОбъект.Записать();
			
			Если ЗаписыватьИдентификатор Тогда
				ЗаписатьИдентификатор(ГруппаОбъект.Ссылка, ВидИдентификатора, Выборка.Идентификатор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонОшибки = НСтр("ru = 'Ошибка записи номенклатурной группы первого уровня:%1%2 (%3) %1%4'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, Выборка.Наименование, Выборка.Идентификатор, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОшибкиЗагрузкиОтсутствуют = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ОшибкиЗагрузкиОтсутствуют;
	
КонецФункции

Функция ЗагрузитьНоменклатурныеГруппыВторогоУровня(Соединение)
	
	// Получаем номенклатурные группы второго уровня
	ТекстЗапроса =
		"SELECT
		|    to_char(group_code) AS group_code,
		|    to_char(subgroup_code) AS subgroup_code,
		|    subgroup_name AS subgroup_name
		|FROM
		|    goods_subgroup";
	
	Попытка
		Выборка = Соединение.Execute(ТекстЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения номенклатурных групп второго уровня:%1%2%1%3'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, ТекстЗапроса, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ТаблицаГрупп = ПолучитьТаблицуЗагрузки(Выборка);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаГрупп.subgroup_code КАК Идентификатор,
		|	ТаблицаГрупп.subgroup_name КАК Наименование,
		|	ТаблицаГрупп.group_code КАК КодРодителя
		|ПОМЕСТИТЬ ТаблицаГрупп
		|ИЗ
		|	&ТаблицаГрупп КАК ТаблицаГрупп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыГрупп.Объект КАК Группа,
		|	ТаблицаГрупп.Идентификатор КАК Идентификатор,
		|	ТаблицаГрупп.Наименование КАК Наименование,
		|	КодыРодителей.Объект КАК Родитель
		|ИЗ
		|	ТаблицаГрупп КАК ТаблицаГрупп
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыГрупп
		|		ПО ТаблицаГрупп.Идентификатор = КодыГрупп.Идентификатор
		|			И (КодыГрупп.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодТоварнойПодгруппы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатурныеГруппы
		|		ПО (КодыГрупп.Объект = НоменклатурныеГруппы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыРодителей
		|		ПО ТаблицаГрупп.КодРодителя = КодыРодителей.Идентификатор
		|			И (КодыРодителей.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодГруппы))
		|ГДЕ
		|	НЕ(ТаблицаГрупп.Наименование = ЕСТЬNULL(НоменклатурныеГруппы.Наименование, """")
		|				И ЕСТЬNULL(КодыРодителей.Объект = НоменклатурныеГруппы.Родитель, ЛОЖЬ))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаГрупп", ТаблицаГрупп);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонПрогресса = НСтр("ru = 'Загрузка групп второго уровня: %1 из: %2'");
	ПараметрыПрогресса = ИнициализироватьПрогресс(Выборка.Количество(), ШаблонПрогресса);
	
	ВидИдентификатора = Перечисления.сакс_ВидыИдентификаторов.КодТоварнойПодгруппы;
	ОшибкиЗагрузкиОтсутствуют = Истина;
	
	Пока Выборка.Следующий() Цикл
		ИзменитьПрогресс(ПараметрыПрогресса);
		
		ГруппаСсылка = Выборка.Группа;
		Если ЗначениеЗаполнено(ГруппаСсылка) Тогда
			ГруппаОбъект = ГруппаСсылка.ПолучитьОбъект();
			ЗаписыватьИдентификатор = Ложь;
		Иначе
			ГруппаОбъект = Справочники.Номенклатура.СоздатьГруппу();
			ЗаписыватьИдентификатор = Истина;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			ЗаполнитьЗначенияСвойств(ГруппаОбъект, Выборка);
			ГруппаОбъект.Записать();
			
			Если ЗаписыватьИдентификатор Тогда
				ЗаписатьИдентификатор(ГруппаОбъект.Ссылка, ВидИдентификатора, Выборка.Идентификатор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонОшибки = НСтр("ru = 'Ошибка записи номенклатурной группы второго уровня:%1%2 (%3) %1%4'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, Выборка.Наименование, Выборка.Идентификатор, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОшибкиЗагрузкиОтсутствуют = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ОшибкиЗагрузкиОтсутствуют;
	
КонецФункции

Функция ЗагрузитьВидыНоменклатуры(Соединение)
	
	ТекстЗапроса =
		"SELECT
		|    to_char(goods_types_list_code) AS code,
		|    type_name AS name
		|FROM
		|    merchant.goods_types_list";
	
	Попытка
		Выборка = Соединение.Execute(ТекстЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения видов номенклатуры:%1%2%1%3'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, ТекстЗапроса, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ТаблицаВидовНоменклатуры = ПолучитьТаблицуЗагрузки(Выборка);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаВидовНоменклатуры.code КАК Идентификатор,
		|	ТаблицаВидовНоменклатуры.name КАК Наименование
		|ПОМЕСТИТЬ ТаблицаВидовНоменклатуры
		|ИЗ
		|	&ТаблицаВидовНоменклатуры КАК ТаблицаВидовНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыВидовНоменклатуры.Объект КАК ВидНоменклатуры,
		|	ТаблицаВидовНоменклатуры.Идентификатор КАК Идентификатор,
		|	ТаблицаВидовНоменклатуры.Наименование КАК Наименование
		|ИЗ
		|	ТаблицаВидовНоменклатуры КАК ТаблицаВидовНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыВидовНоменклатуры
		|		ПО ТаблицаВидовНоменклатуры.Идентификатор = КодыВидовНоменклатуры.Идентификатор
		|			И (КодыВидовНоменклатуры.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодТипаНоменклатуры))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО (КодыВидовНоменклатуры.Объект = ВидыНоменклатуры.Ссылка)
		|ГДЕ
		|	ТаблицаВидовНоменклатуры.Наименование <> ЕСТЬNULL(ВидыНоменклатуры.Наименование, """")";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаВидовНоменклатуры", ТаблицаВидовНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонПрогресса = НСтр("ru = 'Загрузка видов номенклатуры: %1 из: %2'");
	ПараметрыПрогресса = ИнициализироватьПрогресс(Выборка.Количество(), ШаблонПрогресса);
	
	ВидИдентификатора = Перечисления.сакс_ВидыИдентификаторов.КодТипаНоменклатуры;
	ОшибкиЗагрузкиОтсутствуют = Истина;
	
	Пока Выборка.Следующий() Цикл
		ИзменитьПрогресс(ПараметрыПрогресса);
		
		ВидНоменклатурыСсылка = Выборка.ВидНоменклатуры;
		Если ЗначениеЗаполнено(ВидНоменклатурыСсылка) Тогда
			ВидНоменклатурыОбъект = ВидНоменклатурыСсылка.ПолучитьОбъект();
			ЗаписыватьИдентификатор = Ложь;
		Иначе
			ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
			ВидНоменклатурыОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
			ВидНоменклатурыОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
			ЗаписыватьИдентификатор = Истина;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			ЗаполнитьЗначенияСвойств(ВидНоменклатурыОбъект, Выборка);
			ВидНоменклатурыОбъект.Записать();
			
			Если ЗаписыватьИдентификатор Тогда
				ЗаписатьИдентификатор(ВидНоменклатурыОбъект.Ссылка, ВидИдентификатора, Выборка.Идентификатор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонОшибки = НСтр("ru = 'Ошибка записи вида номенклатуры:%1%2 (%3) %1%4'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, Выборка.Наименование, Выборка.Идентификатор, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОшибкиЗагрузкиОтсутствуют = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ОшибкиЗагрузкиОтсутствуют;
	
КонецФункции

Функция ЗагрузитьНоменклатурныеПозиции(Соединение, СтруктураЕдиницИзмерений, СтруктураСвойствНоменклатуры)
	
	// Получаем номенклатурные позиции
	ТекстЗапроса =
		"SELECT
		|    to_char(goods.subgroup_code) AS subgroup_code,
		|    to_char(goods.country_code) AS country_code,
		|    to_char(goods.goods_types_list_code) AS goods_types_code,
		|    to_char(goods.producer_code) AS producer_code,
		|    to_char(goods.ware_code) AS ware_code,
		|    goods.ware_name     AS ware_name,
		|    goods.article       AS article,
		|    goods.nds           AS nds,
		|    goods.unit_weight   AS unit_weight,
		|    goods.width         AS width,
		|    goods.height        AS height,
		|    goods.length        AS length,
		|    goods.pack_width    AS pack_width,
		|    goods.pack_height   AS pack_height,
		|    goods.pack_length   AS pack_length,
		|    goods.barcode       AS barcode,
		|    goods.barcode2      AS barcode2,
		|    goods.barcode3      AS barcode3,
		|    goods.barcode4      AS barcode4,
		|    goods.barcode5      AS barcode5
		|FROM
		|    goods
		|WHERE
		|    ROWNUM <= 100";
	
	Попытка
		Выборка = Соединение.Execute(ТекстЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения номенклатурных позиций:%1%2%1%3'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, ТекстЗапроса, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	ТаблицаНоменклатуры = ПолучитьТаблицуЗагрузки(Выборка);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаЗагрузки.ware_code КАК Идентификатор,
		|	ВЫРАЗИТЬ(ТаблицаЗагрузки.ware_name КАК СТРОКА(100)) КАК Наименование,
		|	ТаблицаЗагрузки.ware_name КАК НаименованиеПолное,
		|	ТаблицаЗагрузки.article КАК Артикул,
		|	ТаблицаЗагрузки.subgroup_code КАК КодРодителя,
		|	ТаблицаЗагрузки.goods_types_code КАК КодВидаНоменклатуры,
		|	ТаблицаЗагрузки.producer_code КАК КодБренда,
		|	ТаблицаЗагрузки.country_code КАК КодСтраны,
		|	ТаблицаЗагрузки.nds КАК Ставка,
		|	ТаблицаЗагрузки.unit_weight * 1000 КАК Вес,
		|	ТаблицаЗагрузки.width КАК Ширина,
		|	ТаблицаЗагрузки.height КАК Высота,
		|	ТаблицаЗагрузки.length КАК Длинна,
		|	ТаблицаЗагрузки.pack_width КАК ШиринаУпаковки,
		|	ТаблицаЗагрузки.pack_height КАК ВысотаУпаковки,
		|	ТаблицаЗагрузки.pack_length КАК ДлиннаУпаковки,
		|	ТаблицаЗагрузки.barcode КАК Штрихкод1,
		|	ТаблицаЗагрузки.barcode2 КАК Штрихкод2,
		|	ТаблицаЗагрузки.barcode3 КАК Штрихкод3,
		|	ТаблицаЗагрузки.barcode4 КАК Штрихкод4,
		|	ТаблицаЗагрузки.barcode5 КАК Штрихкод5
		|ПОМЕСТИТЬ ТаблицаЗагрузки
		|ИЗ
		|	&ТаблицаЗагрузки КАК ТаблицаЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) КАК СтавкаНДС,
		|	20 КАК Ставка
		|ПОМЕСТИТЬ ТаблицаСтавокНДС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10),
		|	10
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
		|	0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор,
		|	ТаблицаЗагрузки.Наименование КАК Наименование,
		|	ТаблицаЗагрузки.НаименованиеПолное КАК НаименованиеПолное,
		|	ТаблицаЗагрузки.Артикул КАК Артикул,
		|	КодыРодителей.Объект КАК Родитель,
		|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
		|	ВидыНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВидыНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	ВидыНоменклатуры.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|	МаркиБрендов.Ссылка КАК Марка,
		|	МаркиБрендов.Производитель КАК Производитель,
		|	ТаблицаСтавокНДС.СтавкаНДС КАК СтавкаНДС,
		|	&ЕдиницаИзмеренияШтук КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(КодыСтранМира.Объект, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтранаПроисхождения,
		|	ТаблицаЗагрузки.Штрихкод1 КАК Штрихкод1,
		|	ТаблицаЗагрузки.Штрихкод2 КАК Штрихкод2,
		|	ТаблицаЗагрузки.Штрихкод3 КАК Штрихкод3,
		|	ТаблицаЗагрузки.Штрихкод4 КАК Штрихкод4,
		|	ТаблицаЗагрузки.Штрихкод5 КАК Штрихкод5,
		|	ТаблицаЗагрузки.Вес КАК ВесЧислитель,
		|	ВЫБОР
		|		КОГДА ТаблицаЗагрузки.Вес > 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесЗнаменатель,
		|	ВЫБОР
		|		КОГДА ТаблицаЗагрузки.Вес > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВесИспользовать,
		|	ВЫБОР
		|		КОГДА ТаблицаЗагрузки.Вес > 0
		|			ТОГДА &ЕдиницаИзмеренияВеса
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОНЕЦ КАК ВесЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТаблицаЗагрузки.Наименование <> ЕСТЬNULL(СправочникНоменклатура.Наименование, """")
		|			ТОГДА ИСТИНА
		|		КОГДА ТаблицаЗагрузки.НаименованиеПолное <> ЕСТЬNULL(СправочникНоменклатура.НаименованиеПолное, """")
		|			ТОГДА ИСТИНА
		|		КОГДА ТаблицаЗагрузки.Артикул <> ЕСТЬNULL(СправочникНоменклатура.Артикул, """")
		|			ТОГДА ИСТИНА
		|		КОГДА ТаблицаЗагрузки.Вес <> ЕСТЬNULL(СправочникНоменклатура.ВесЧислитель, 0)
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(КодыРодителей.Объект, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> ЕСТЬNULL(СправочникНоменклатура.Родитель, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(ВидыНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) <> ЕСТЬNULL(СправочникНоменклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(МаркиБрендов.Ссылка, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)) <> ЕСТЬNULL(СправочникНоменклатура.Марка, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(МаркиБрендов.Производитель, ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)) <> ЕСТЬNULL(СправочникНоменклатура.Производитель, ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(ТаблицаСтавокНДС.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) <> ЕСТЬNULL(СправочникНоменклатура.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		КОГДА &ЕдиницаИзмеренияШтук <> ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИзменениеНоменклатуры,
		|	ВЫБОР
		|		КОГДА ТаблицаЗагрузки.Штрихкод1 <> ЕСТЬNULL(ШтрихКоды1.Штрихкод, """")
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИзменениеШтрихкода1,
		|	ВЫБОР
		|		КОГДА ТаблицаЗагрузки.Штрихкод2 <> ЕСТЬNULL(ШтрихКоды2.Штрихкод, """")
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИзменениеШтрихкода2,
		|	ВЫБОР
		|		КОГДА ТаблицаЗагрузки.Штрихкод3 <> ЕСТЬNULL(ШтрихКоды3.Штрихкод, """")
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИзменениеШтрихкода3,
		|	ВЫБОР
		|		КОГДА ТаблицаЗагрузки.Штрихкод4 <> ЕСТЬNULL(ШтрихКоды4.Штрихкод, """")
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИзменениеШтрихкода4,
		|	ВЫБОР
		|		КОГДА ТаблицаЗагрузки.Штрихкод5 <> ЕСТЬNULL(ШтрихКоды5.Штрихкод, """")
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИзменениеШтрихкода5
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	ТаблицаЗагрузки КАК ТаблицаЗагрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыНоменклатуры
		|		ПО ТаблицаЗагрузки.Идентификатор = КодыНоменклатуры.Идентификатор
		|			И (КодыНоменклатуры.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодТовара))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (КодыНоменклатуры.Объект = СправочникНоменклатура.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыВидовНоменклатуры
		|		ПО ТаблицаЗагрузки.КодВидаНоменклатуры = КодыВидовНоменклатуры.Идентификатор
		|			И (КодыВидовНоменклатуры.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодТипаНоменклатуры))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО (КодыВидовНоменклатуры.Объект = ВидыНоменклатуры.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыБрендов
		|		ПО ТаблицаЗагрузки.КодБренда = КодыБрендов.Идентификатор
		|			И (КодыБрендов.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодБренда))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Марки КАК МаркиБрендов
		|		ПО (КодыБрендов.Объект = МаркиБрендов.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыРодителей
		|		ПО ТаблицаЗагрузки.КодРодителя = КодыРодителей.Идентификатор
		|			И (КодыРодителей.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодТоварнойПодгруппы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сакс_ИдентификаторыОбъектов КАК КодыСтранМира
		|		ПО ТаблицаЗагрузки.КодСтраны = КодыСтранМира.Идентификатор
		|			И (КодыСтранМира.ВидИдентификатора = ЗНАЧЕНИЕ(Перечисление.сакс_ВидыИдентификаторов.КодСтраныПроизводителя))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтавокНДС КАК ТаблицаСтавокНДС
		|		ПО ТаблицаЗагрузки.Ставка = ТаблицаСтавокНДС.Ставка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихКоды1
		|		ПО ТаблицаЗагрузки.Штрихкод1 = ШтрихКоды1.Штрихкод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихКоды2
		|		ПО ТаблицаЗагрузки.Штрихкод2 = ШтрихКоды2.Штрихкод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихКоды3
		|		ПО ТаблицаЗагрузки.Штрихкод3 = ШтрихКоды3.Штрихкод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихКоды4
		|		ПО ТаблицаЗагрузки.Штрихкод4 = ШтрихКоды4.Штрихкод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихКоды5
		|		ПО ТаблицаЗагрузки.Штрихкод5 = ШтрихКоды5.Штрихкод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТаблицаНоменклатуры.СтранаПроисхождения <> ЕСТЬNULL(РеквизитыСтраныМира.Значение, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИзменениеСтраныПроисхождения
		|ПОМЕСТИТЬ ТаблицаДопРеквизитов
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК РеквизитыСтраныМира
		|		ПО ТаблицаНоменклатуры.Номенклатура = РеквизитыСтраныМира.Ссылка
		|			И (РеквизитыСтраныМира.Свойство = &СвойствоСтранаПроизводитель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Идентификатор КАК Идентификатор,
		|	ТаблицаНоменклатуры.Наименование КАК Наименование,
		|	ТаблицаНоменклатуры.НаименованиеПолное КАК НаименованиеПолное,
		|	ТаблицаНоменклатуры.Артикул КАК Артикул,
		|	ТаблицаНоменклатуры.Родитель КАК Родитель,
		|	ТаблицаНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	ТаблицаНоменклатуры.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаНоменклатуры.Марка КАК Марка,
		|	ТаблицаНоменклатуры.Производитель КАК Производитель,
		|	ТаблицаНоменклатуры.Штрихкод1 КАК Штрихкод1,
		|	ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода1 КАК ЕстьИзменениеШтрихкода1,
		|	ТаблицаНоменклатуры.Штрихкод2 КАК Штрихкод2,
		|	ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода2 КАК ЕстьИзменениеШтрихкода2,
		|	ТаблицаНоменклатуры.Штрихкод3 КАК Штрихкод3,
		|	ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода3 КАК ЕстьИзменениеШтрихкода3,
		|	ТаблицаНоменклатуры.Штрихкод4 КАК Штрихкод4,
		|	ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода4 КАК ЕстьИзменениеШтрихкода4,
		|	ТаблицаНоменклатуры.Штрихкод5 КАК Штрихкод5,
		|	ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода5 КАК ЕстьИзменениеШтрихкода5,
		|	ТаблицаНоменклатуры.ВесЧислитель КАК ВесЧислитель,
		|	ТаблицаНоменклатуры.ВесЗнаменатель КАК ВесЗнаменатель,
		|	ТаблицаНоменклатуры.ВесИспользовать КАК ВесИспользовать,
		|	ТаблицаНоменклатуры.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
		|	ТаблицаНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ТаблицаДопРеквизитов.ЕстьИзменениеСтраныПроисхождения КАК ЕстьИзменениеСтраныПроисхождения,
		|	ТаблицаНоменклатуры.ЕстьИзменениеНоменклатуры КАК ЕстьИзменениеНоменклатуры,
		|	ВЫБОР
		|		КОГДА ТаблицаДопРеквизитов.ЕстьИзменениеСтраныПроисхождения
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИзменениеДопРеквизитов
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДопРеквизитов КАК ТаблицаДопРеквизитов
		|		ПО ТаблицаНоменклатуры.Номенклатура = ТаблицаДопРеквизитов.Номенклатура
		|ГДЕ
		|	(ТаблицаНоменклатуры.ЕстьИзменениеНоменклатуры
		|			ИЛИ ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода1
		|			ИЛИ ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода2
		|			ИЛИ ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода3
		|			ИЛИ ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода4
		|			ИЛИ ТаблицаНоменклатуры.ЕстьИзменениеШтрихкода5
		|			ИЛИ ТаблицаДопРеквизитов.ЕстьИзменениеСтраныПроисхождения)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаЗагрузки", ТаблицаНоменклатуры);
	
	Для Каждого Свойство Из СтруктураСвойствНоменклатуры Цикл
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	Для Каждого ЕдиницаИзмерения Из СтруктураЕдиницИзмерений Цикл
		Запрос.УстановитьПараметр(ЕдиницаИзмерения.Ключ, ЕдиницаИзмерения.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонПрогресса = НСтр("ru = 'Загрузка номенклатурных позиций: %1 из: %2'");
	ПараметрыПрогресса = ИнициализироватьПрогресс(Выборка.Количество(), ШаблонПрогресса);
	
	ВидИдентификатора = Перечисления.сакс_ВидыИдентификаторов.КодТовара;
	ОшибкиЗагрузкиОтсутствуют = Истина;
	
	Пока Выборка.Следующий() Цикл
		ИзменитьПрогресс(ПараметрыПрогресса);
		
		НоменклатураСсылка = Выборка.Номенклатура;
		
		Если Выборка.ЕстьИзменениеНоменклатуры ИЛИ Выборка.ЕстьИзменениеДопРеквизитов Тогда
			Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
				НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			Иначе
				НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			Если Выборка.ЕстьИзменениеНоменклатуры Тогда
				ЗаполнитьЗначенияСвойств(НоменклатураОбъект, Выборка);
			КонецЕсли;
			
			Если Выборка.ЕстьИзменениеСтраныПроисхождения Тогда
				ЗаписатьДопРеквизит(НоменклатураОбъект, СтруктураСвойствНоменклатуры.СвойствоСтранаПроизводитель, Выборка.СтранаПроисхождения);
			КонецЕсли;
			
			Если Выборка.ЕстьИзменениеНоменклатуры ИЛИ Выборка.ЕстьИзменениеДопРеквизитов Тогда
				НоменклатураОбъект.Записать();
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоменклатураСсылка) Тогда
				НоменклатураСсылка = НоменклатураОбъект.Ссылка;
				ЗаписатьИдентификатор(НоменклатураСсылка, ВидИдентификатора, Выборка.Идентификатор);
			КонецЕсли;
			
			Для НомерШтрихкода = 1 По 5 Цикл
				Если Выборка["ЕстьИзменениеШтрихкода" + НомерШтрихкода] Тогда
					ЗаписатьШтрихкод(НоменклатураСсылка, Выборка["Штрихкод" + НомерШтрихкода]);
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
			ШаблонОшибки = НСтр("ru = 'Загружена номенклатура:%1%2 (%3) %1%4'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, Выборка.Наименование, Выборка.Артикул, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Исключение
			ОтменитьТранзакцию();
			ШаблонОшибки = НСтр("ru = 'Ошибка записи номенклатуры:%1%2 (%3) %1%4'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Символы.ПС, Выборка.Наименование, Выборка.Идентификатор, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОшибкиЗагрузкиОтсутствуют = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ОшибкиЗагрузкиОтсутствуют;
	
КонецФункции

#КонецОбласти

#КонецОбласти