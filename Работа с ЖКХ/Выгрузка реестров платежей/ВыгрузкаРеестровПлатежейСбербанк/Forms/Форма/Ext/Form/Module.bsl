#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	ДатаРеестра = КонецМесяца(ТекущаяДата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Заголовок", НСтр("ru = 'Выберите файл'"));
	НастройкиДиалога.Вставить("Фильтр", "txt (*.txt)|*.txt");
	НастройкиДиалога.Вставить("ПроверятьСуществованиеФайла", Ложь);
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(ЭтотОбъект, "ИмяФайлаВыгрузки", СтандартнаяОбработка, НастройкиДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПроверитьФайлВыгрузки(Истина) Тогда
		ЗапуститьПриложение(ИмяФайлаВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеестр

&НаКлиенте
Процедура РеестрЛицевойСчетПриИзменении(Элемент)
	
	ИзменяемаяСтрока = ЭтаФорма.Элементы.Реестр.ТекущиеДанные;
	Если ИзменяемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЛицевойСчет = ИзменяемаяСтрока.ЛицевойСчет;
	Если Не ЗначениеЗаполнено(ЛицевойСчет) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = ПолучитьРеквизитыЛицевогоСчета(ЛицевойСчет);
	Если СтруктураРеквизитов.Задолженность = 0 Тогда
		ШаблонОшибки = НСтр("ru = 'По лицевому счету ""%1"" нет задолженности!'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ЛицевойСчет);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Объект.Реестр.Удалить(ИзменяемаяСтрока);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		ШаблонОшибки = НСтр("ru = 'В лицевом счета ""%1"" не заполнен реквизит Контрагент!'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ЛицевойСчет);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Объект.Реестр.Удалить(ИзменяемаяСтрока);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, СтруктураРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьРеестрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Не ПроверитьФайлВыгрузки() Тогда
		Возврат;
	КонецЕсли;
	
	ДокументВыгрузки = Новый ТекстовыйДокумент();
	ДатаРеестраСтрокой = Формат(ДатаРеестра, "ДФ=MMyy");
	
	Для Каждого СтрокаРеестра Из Объект.Реестр Цикл
		ЛицевойСчетНаименование = СокрЛП(СтрокаРеестра.ЛицевойСчетНаименование);
		НомерЛицевогоСчета = СокрЛП(СтрокаРеестра.НомерЛицевогоСчета);
		
		Если Не ЗначениеЗаполнено(СтрокаРеестра.Контрагент) Тогда
			ШаблонОшибки = НСтр("ru = 'В лицевом счета %1 (%2) не заполнен реквизит %3. Выгрузка лицевого счета невозможна!'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ЛицевойСчетНаименование, НомерЛицевогоСчета, "Контрагент");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СуммаЗадолженностиСтрокой = Формат(СтрокаРеестра.Задолженность, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=");
		НаименованиеПомещения = "Сочи," + СтрокаРеестра.ПомещениеНаименование;
		
		МассивСтроки = Новый Массив;
		МассивСтроки.Добавить(НомерЛицевогоСчета);
		МассивСтроки.Добавить(ЛицевойСчетНаименование);
		МассивСтроки.Добавить(НаименованиеПомещения);
		МассивСтроки.Добавить(ДатаРеестраСтрокой);
		МассивСтроки.Добавить(СуммаЗадолженностиСтрокой);
		
		НоваяСтрока = СтрСоединить(МассивСтроки, ";");
		ДокументВыгрузки.ДобавитьСтроку(НоваяСтрока);
	КонецЦикла;
	
	ДокументВыгрузки.Записать(ИмяФайлаВыгрузки, КодировкаТекста.ANSI);
	
	ТекстСообщения = НСтр("ru = 'Выгрузка завершена'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьФайлВыгрузки(ПроверятьНаСуществование = Ложь)
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
		ТекстОшибки = НСтр("ru = 'Не указано имя файла выгрузки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ИмяФайлаВыгрузки");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьНаСуществование Тогда
		Файл = Новый Файл(ИмяФайлаВыгрузки);
		Если Не Файл.Существует() Тогда
			ТекстОшибки = НСтр("ru = 'Указанный файл выгрузки не существует!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ИмяФайлаВыгрузки");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеестрНаСервере()
	
	Объект.Реестр.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КУ_ВзаиморасчетыОстатки.ЛицевойСчет КАК ЛицевойСчет,
		|	КУ_ВзаиморасчетыОстатки.СуммаНачисленияОстаток + КУ_ВзаиморасчетыОстатки.СуммаАвансаОстаток + КУ_ВзаиморасчетыОстатки.СуммаПениОстаток КАК Задолженность
		|ПОМЕСТИТЬ ОстаткиПоЛицевымСчетам
		|ИЗ
		|	РегистрНакопления.КУ_Взаиморасчеты.Остатки(
		|			&ГраницаОстатков,
		|			ЛицевойСчет <> ЗНАЧЕНИЕ(Справочник.Ку_ЛицевыеСчета.ПустаяСсылка)
		|				И ЛицевойСчет.Здание В ИЕРАРХИИ (&Здание)) КАК КУ_ВзаиморасчетыОстатки
		|ГДЕ
		|	КУ_ВзаиморасчетыОстатки.СуммаНачисленияОстаток + КУ_ВзаиморасчетыОстатки.СуммаАвансаОстаток + КУ_ВзаиморасчетыОстатки.СуммаПениОстаток <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КУ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	КУ_ЛицевыеСчета.Наименование КАК ЛицевойСчетНаименование,
		|	КУ_ЛицевыеСчета.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
		|	КУ_ЛицевыеСчета.Контрагент КАК Контрагент,
		|	КУ_ПомещенияЖилогоДома.Наименование КАК ПомещениеНаименование,
		|	ОстаткиПоЛицевымСчетам.Задолженность КАК Задолженность
		|ИЗ
		|	ОстаткиПоЛицевымСчетам КАК ОстаткиПоЛицевымСчетам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ЛицевыеСчета КАК КУ_ЛицевыеСчета
		|		ПО ОстаткиПоЛицевымСчетам.ЛицевойСчет = КУ_ЛицевыеСчета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ПомещенияЖилогоДома КАК КУ_ПомещенияЖилогоДома
		|		ПО (КУ_ЛицевыеСчета.Помещение = КУ_ПомещенияЖилогоДома.Ссылка)";
	
	Если ЗначениеЗаполнено(Здание) Тогда
		Запрос.УстановитьПараметр("Здание", Здание);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЛицевойСчет.Здание В ИЕРАРХИИ (&Здание)", "");
	КонецЕсли;
	
	ГраницаОстатков = Новый Граница(КонецДня(ДатаРеестра), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Реестр.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыЛицевогоСчета(ЛицевойСчет)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КУ_ВзаиморасчетыОстатки.ЛицевойСчет КАК ЛицевойСчет,
		|	КУ_ВзаиморасчетыОстатки.СуммаНачисленияОстаток + КУ_ВзаиморасчетыОстатки.СуммаАвансаОстаток + КУ_ВзаиморасчетыОстатки.СуммаПениОстаток КАК Задолженность
		|ПОМЕСТИТЬ ОстаткиПоЛицевымСчетам
		|ИЗ
		|	РегистрНакопления.КУ_Взаиморасчеты.Остатки(
		|			&ГраницаОстатков,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И ЛицевойСчет.Здание В ИЕРАРХИИ (&Здание)) КАК КУ_ВзаиморасчетыОстатки
		|ГДЕ
		|	КУ_ВзаиморасчетыОстатки.СуммаНачисленияОстаток + КУ_ВзаиморасчетыОстатки.СуммаАвансаОстаток + КУ_ВзаиморасчетыОстатки.СуммаПениОстаток <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КУ_ЛицевыеСчета.Наименование КАК ЛицевойСчетНаименование,
		|	КУ_ЛицевыеСчета.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
		|	КУ_ЛицевыеСчета.Контрагент КАК Контрагент,
		|	КУ_ПомещенияЖилогоДома.Наименование КАК ПомещениеНаименование,
		|	ОстаткиПоЛицевымСчетам.Задолженность КАК Задолженность
		|ИЗ
		|	ОстаткиПоЛицевымСчетам КАК ОстаткиПоЛицевымСчетам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ЛицевыеСчета КАК КУ_ЛицевыеСчета
		|		ПО ОстаткиПоЛицевымСчетам.ЛицевойСчет = КУ_ЛицевыеСчета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ПомещенияЖилогоДома КАК КУ_ПомещенияЖилогоДома
		|		ПО (КУ_ЛицевыеСчета.Помещение = КУ_ПомещенияЖилогоДома.Ссылка)";
	
	Если ЗначениеЗаполнено(Здание) Тогда
		Запрос.УстановитьПараметр("Здание", Здание);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЛицевойСчет.Здание В ИЕРАРХИИ (&Здание)", "");
	КонецЕсли;
	
	ГраницаОстатков = Новый Граница(КонецДня(ДатаРеестра), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ЛицевойСчетНаименование", "");
	СтруктураРезультат.Вставить("НомерЛицевогоСчета", "");
	СтруктураРезультат.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРезультат.Вставить("ПомещениеНаименование", "");
	СтруктураРезультат.Вставить("Задолженность", 0);
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти