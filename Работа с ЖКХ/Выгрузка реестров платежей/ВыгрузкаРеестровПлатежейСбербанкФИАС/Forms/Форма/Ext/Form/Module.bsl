#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	ДатаРеестра = КонецМесяца(ТекущаяДата);
	ПериодОплаты = ДобавитьМесяц(ДатаРеестра, -1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Заголовок", НСтр("ru = 'Выберите каталог для выгрузки'"));
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(
		ЭтотОбъект, "ИмяКаталогаВыгрузки", СтандартнаяОбработка, НастройкиДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПроверитьКаталогВыгрузки() Тогда
		ЗапуститьПриложение(ИмяКаталогаВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьКаталогВыгрузки() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучаемыеФайлы = Новый Массив;
	ИмяФайлаВыгрузки = ПолучитьИмяФайлаВыгрузки();
	
	ВыгрузитьРеестрНаСервере(ПолучаемыеФайлы, ИмяФайлаВыгрузки);
	
	Если ПолучаемыеФайлы.Количество() > 0 Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПослеПолученияФайлов", ЭтотОбъект);
		НачатьПолучениеФайлов(ОповещениеОЗавершении, ПолучаемыеФайлы, , Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьКаталогВыгрузки()
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ИмяКаталогаВыгрузки) Тогда
		ТекстОшибки = НСтр("ru = 'Не указано имя каталога выгрузки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ИмяКаталогаВыгрузки");
		Возврат Ложь;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяКаталогаВыгрузки);
	Если Не Файл.Существует() Тогда
		ТекстОшибки = НСтр("ru = 'Указанный каталог выгрузки не существует!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ИмяКаталогаВыгрузки");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяФайлаВыгрузки()
	
	ИмяФайлаВыгрузки = СокрЛП(ИмяКаталогаВыгрузки);
	Разделитель = ?(СтрЗаканчиваетсяНа(ИмяФайлаВыгрузки, "\"), "", "\");
	ИННОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "НомерСчета");
	ТекущаяДатаСтрокой = Формат(ТекущаяДатаСеанса(), "ДФ=ddMMyyyy");
	
	МассивИмениФайла = Новый Массив;
	МассивИмениФайла.Добавить(ИмяФайлаВыгрузки);
	МассивИмениФайла.Добавить(Разделитель);
	МассивИмениФайла.Добавить(ИННОрганизации);
	МассивИмениФайла.Добавить("_");
	МассивИмениФайла.Добавить(НомерСчета);
	МассивИмениФайла.Добавить("_2_");
	МассивИмениФайла.Добавить(ТекущаяДатаСтрокой);
	МассивИмениФайла.Добавить(".txt");
	
	ИмяФайлаВыгрузки = СтрСоединить(МассивИмениФайла, "");
	
	Возврат ИмяФайлаВыгрузки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьРеестрНаСервере(ПолучаемыеФайлы, ИмяФайла)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МакетРезультатаВыгрузки = ОбработкаОбъект.ПолучитьМакет("Макет");
	ОбластьШапка = МакетРезультатаВыгрузки.ПолучитьОбласть("Шапка");
	ОбластьЛицевойСчет = МакетРезультатаВыгрузки.ПолучитьОбласть("ЛицевойСчет");
	ОбластьПоказатель = МакетРезультатаВыгрузки.ПолучитьОбласть("Показатель");
	ОбластьПодвал = МакетРезультатаВыгрузки.ПолучитьОбласть("Подвал");
	РезультатВыгрузки.Вывести(ОбластьШапка);
	
	РезультатЗапроса = ПолучитьДанныеРеестра();
	ПериодОплатыСтрокой = Формат(ПериодОплаты, "ДФ=MMyyyy");
	МассивВыгружаемыхДанных = Новый Массив;
	
	ВыборкаПоЛицевымСчетам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЛицевымСчетам.Следующий() Цикл
		ФИОПлательщика = СокрЛП(ВыборкаПоЛицевымСчетам.ФИОПлательщика);
		НомерЛицевогоСчета = СокрЛП(ВыборкаПоЛицевымСчетам.НомерЛицевогоСчета);
		
		Если Не ЗначениеЗаполнено(ВыборкаПоЛицевымСчетам.Контрагент) Тогда
			ШаблонОшибки = НСтр("ru = 'В лицевом счета %1 (%2) не заполнен реквизит %3. Выгрузка лицевого счета невозможна!'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ФИОПлательщика, НомерЛицевогоСчета, "Контрагент");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		ЕдиныйЛицевойСчет = СокрЛП(ВыборкаПоЛицевымСчетам.ЕдиныйЛицевойСчет);
		
		Если Не ЗначениеЗаполнено(ЕдиныйЛицевойСчет) Тогда
			ШаблонОшибки = НСтр("ru = 'В лицевом счета %1 (%2) не заполнен реквизит %3. Выгрузка лицевого счета невозможна!'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ФИОПлательщика, НомерЛицевогоСчета, "Единый номер лицевого счета (ГИС ЖКХ)");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		МассивВыгружаемойСтроки = Новый Массив;
		
		// ФИО
		МассивВыгружаемойСтроки.Добавить(ФИОПлательщика);
		
		// ЕЛС - Единый лицевой счет плательщика
		МассивВыгружаемойСтроки.Добавить(ЕдиныйЛицевойСчет);
		
		// Код ФИАС
		КодДомаПоФИАС = СокрЛП(ВыборкаПоЛицевымСчетам.КодДомаПоФИАС);
		НомерКвартиры = ВыборкаПоЛицевымСчетам.НомерКвартиры;
		
		Если НомерКвартиры > 0 Тогда
			КодДомаПоФИАС = КодДомаПоФИАС + "," + Формат(НомерКвартиры, "ЧГ=");
		КонецЕсли;
		
		МассивВыгружаемойСтроки.Добавить(КодДомаПоФИАС);
		
		// Адрес
		Адрес = СокрЛП(ВыборкаПоЛицевымСчетам.Адрес);
		МассивВыгружаемойСтроки.Добавить(Адрес);
		
		// Номер лицевого счета плательщика
		НомерЛицевогоСчета = ВРег(НомерЛицевогоСчета);
		МассивВыгружаемойСтроки.Добавить(НомерЛицевогоСчета);
		
		// Сумма задолженности
		СуммаЗадолженности = Формат(ВыборкаПоЛицевымСчетам.Задолженность, "ЧДЦ=2; ЧРД=.; ЧГ=");
		МассивВыгружаемойСтроки.Добавить(СуммаЗадолженности);
		
		// Период оплаты (формат ммгггг)
		МассивВыгружаемойСтроки.Добавить(ПериодОплатыСтрокой);
		
		ОбластьЛицевойСчет.Параметры.ЛицевойСчет = ВыборкаПоЛицевымСчетам.ЛицевойСчет;
		ОбластьЛицевойСчет.Параметры.ФИОПлательщика = ФИОПлательщика;
		ОбластьЛицевойСчет.Параметры.НомерЛицевогоСчета = НомерЛицевогоСчета;
		ОбластьЛицевойСчет.Параметры.СуммаЗадолженности = СуммаЗадолженности;
		РезультатВыгрузки.Вывести(ОбластьЛицевойСчет);
		
		МассивПоказателей = Новый Массив;
		
		ВыборкаПоПоказателям = ВыборкаПоЛицевымСчетам.Выбрать();
		Пока ВыборкаПоПоказателям.Следующий() Цикл
			ТипПоказателя = ВыборкаПоПоказателям.ТипПоказателя;
			Если ТипПоказателя = "Счетчик" Тогда
				// Код счетчика
				КодСчетчика = СокрЛП(ВыборкаПоПоказателям.КодПоказателя);
				МассивПоказателей.Добавить(КодСчетчика);
				
				// Наименование счетчика
				НаименованиеСчетчика = СокрЛП(ВыборкаПоПоказателям.НаименованиеПоказателя);
				МассивПоказателей.Добавить(НаименованиеСчетчика);
				
				// Предыдущее показание счетчика
				ЗначениеПоказателя = Формат(ВыборкаПоПоказателям.ЗначениеПоказателя, "ЧДЦ=3; ЧРД=.; ЧГ=");
				МассивПоказателей.Добавить(ЗначениеПоказателя);
				
				ОбластьПоказатель.Параметры.СсылкаПоказателя = ВыборкаПоПоказателям.СсылкаПоказателя;
				ОбластьПоказатель.Параметры.НаименованиеПоказателя = НаименованиеСчетчика;
				ОбластьПоказатель.Параметры.ТипПоказателя = ТипПоказателя;
				ОбластьПоказатель.Параметры.ЗначениеПоказателя = ЗначениеПоказателя;
				РезультатВыгрузки.Вывести(ОбластьПоказатель);
			ИначеЕсли ТипПоказателя = "Услуга" Тогда
				// Код услуги
				КодУслуги = СокрЛП(ВыборкаПоПоказателям.КодПоказателя);
				МассивПоказателей.Добавить(КодУслуги);
				
				// Наименование услуги
				НаименованиеУслуги = СокрЛП(ВыборкаПоПоказателям.НаименованиеПоказателя);
				МассивПоказателей.Добавить(НаименованиеУслуги);
				
				// Сумма к оплате по услуге
				ЗначениеПоказателя = Формат(ВыборкаПоПоказателям.ЗначениеПоказателя, "ЧДЦ=2; ЧРД=.; ЧГ=");
				МассивПоказателей.Добавить(ЗначениеПоказателя);
				
				ОбластьПоказатель.Параметры.СсылкаПоказателя = ВыборкаПоПоказателям.СсылкаПоказателя;
				ОбластьПоказатель.Параметры.НаименованиеПоказателя = НаименованиеУслуги;
				ОбластьПоказатель.Параметры.ТипПоказателя = ТипПоказателя;
				ОбластьПоказатель.Параметры.ЗначениеПоказателя = ЗначениеПоказателя;
				РезультатВыгрузки.Вывести(ОбластьПоказатель);
			Иначе
				МассивПоказателей.Добавить("[!]");
			КонецЕсли;
		КонецЦикла;
		
		// Показатели - счетчики и услуги
		СтрокаПоказателей = СтрСоединить(МассивПоказателей, ":");
		МассивВыгружаемойСтроки.Добавить(СтрокаПоказателей);
		
		// Пустое поле
		МассивВыгружаемойСтроки.Добавить("");
		
		// Скрытие кодов услуг. Если требуется скрыть, то проставляется значение "1", иначе оставить поле пустым.
		МассивВыгружаемойСтроки.Добавить("1");
		
		ВыгружаемаяСтрока = СтрСоединить(МассивВыгружаемойСтроки, ";");
		МассивВыгружаемыхДанных.Добавить(ВыгружаемаяСтрока);
	КонецЦикла;
	
	РезультатВыгрузки.Вывести(ОбластьПодвал);
	
	СохраняемыйТекст = СтрСоединить(МассивВыгружаемыхДанных, Символы.ПС);
	СохранитьТекстВФайл(ПолучаемыеФайлы, СохраняемыйТекст, ИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРеестра()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КУ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	КУ_ЛицевыеСчета.Помещение КАК Помещение
		|ПОМЕСТИТЬ ТаблицаЛицевыхСчетов
		|ИЗ
		|	Справочник.КУ_ЛицевыеСчета КАК КУ_ЛицевыеСчета
		|ГДЕ
		|	КУ_ЛицевыеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|	И КУ_ЛицевыеСчета.Здание В ИЕРАРХИИ(&Здание)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КУ_ВзаиморасчетыОстатки.ЛицевойСчет КАК ЛицевойСчет,
		|	КУ_ВзаиморасчетыОстатки.ВидНачисления КАК ВидНачисления,
		|	КУ_ВзаиморасчетыОстатки.СуммаНачисленияОстаток + КУ_ВзаиморасчетыОстатки.СуммаАвансаОстаток + КУ_ВзаиморасчетыОстатки.СуммаПениОстаток КАК Задолженность
		|ПОМЕСТИТЬ ТаблицаЗадолженности
		|ИЗ
		|	РегистрНакопления.КУ_Взаиморасчеты.Остатки(
		|			&ГраницаОстатков,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					ТаблицаЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет
		|				ИЗ
		|					ТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов)) КАК КУ_ВзаиморасчетыОстатки
		|ГДЕ
		|	КУ_ВзаиморасчетыОстатки.СуммаНачисленияОстаток + КУ_ВзаиморасчетыОстатки.СуммаАвансаОстаток + КУ_ВзаиморасчетыОстатки.СуммаПениОстаток <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КУ_Счетчики.Ссылка КАК Счетчик
		|ПОМЕСТИТЬ ТаблицаСчетчиков
		|ИЗ
		|	Справочник.КУ_Счетчики КАК КУ_Счетчики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов
		|		ПО КУ_Счетчики.Помещение = ТаблицаЛицевыхСчетов.Помещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КУ_ПоказанияСчетчиковСрезПоследних.Счетчик КАК Счетчик,
		|	КУ_ПоказанияСчетчиковСрезПоследних.ПредыдущееПоказание КАК ПредыдущееПоказание
		|ПОМЕСТИТЬ ТаблицаПоказанийСчетчиков
		|ИЗ
		|	РегистрСведений.КУ_ПоказанияСчетчиков.СрезПоследних(
		|			&ГраницаОстатков,
		|			Счетчик В
		|				(ВЫБРАТЬ
		|					ТаблицаСчетчиков.Счетчик КАК Счетчик
		|				ИЗ
		|					ТаблицаСчетчиков КАК ТаблицаСчетчиков)) КАК КУ_ПоказанияСчетчиковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Порядок,
		|	""Счетчик"" КАК ТипПоказателя,
		|	КУ_Счетчики.Помещение КАК Помещение,
		|	КУ_Счетчики.Ссылка КАК СсылкаПоказателя,
		|	КУ_ВидыУслуг.Наименование КАК НаименованиеПоказателя,
		|	КУ_Счетчики.Код КАК КодПоказателя,
		|	ТаблицаПоказанийСчетчиков.ПредыдущееПоказание КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ ТаблицаПоказателей
		|ИЗ
		|	ТаблицаПоказанийСчетчиков КАК ТаблицаПоказанийСчетчиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_Счетчики КАК КУ_Счетчики
		|		ПО ТаблицаПоказанийСчетчиков.Счетчик = КУ_Счетчики.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ВидыУслуг КАК КУ_ВидыУслуг
		|		ПО (КУ_Счетчики.ВидУслуги = КУ_ВидыУслуг.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	""Разделитель"",
		|	КУ_Счетчики.Помещение,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	"""",
		|	0
		|ИЗ
		|	ТаблицаПоказанийСчетчиков КАК ТаблицаПоказанийСчетчиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_Счетчики КАК КУ_Счетчики
		|		ПО ТаблицаПоказанийСчетчиков.Счетчик = КУ_Счетчики.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	КУ_Счетчики.Помещение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	""Услуга"",
		|	КУ_ЛицевыеСчета.Помещение,
		|	КУ_ВидыНачисленийНаЖилье.Ссылка,
		|	КУ_ВидыНачисленийНаЖилье.НаименованиеДляПечатиВКвитанции,
		|	КУ_ВидыНачисленийНаЖилье.Код,
		|	ТаблицаЗадолженности.Задолженность
		|ИЗ
		|	ТаблицаЗадолженности КАК ТаблицаЗадолженности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ЛицевыеСчета КАК КУ_ЛицевыеСчета
		|		ПО ТаблицаЗадолженности.ЛицевойСчет = КУ_ЛицевыеСчета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ВидыНачисленийНаЖилье КАК КУ_ВидыНачисленийНаЖилье
		|		ПО ТаблицаЗадолженности.ВидНачисления = КУ_ВидыНачисленийНаЖилье.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
		|	СУММА(ТаблицаЗадолженности.Задолженность) КАК Задолженность
		|ПОМЕСТИТЬ ТаблицаИтоговойЗадолженности
		|ИЗ
		|	ТаблицаЗадолженности КАК ТаблицаЗадолженности
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗадолженности.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КУ_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	КУ_ЛицевыеСчета.Контрагент КАК Контрагент,
		|	КУ_ЛицевыеСчета.Наименование КАК ФИОПлательщика,
		|	КУ_ЛицевыеСчета.ГИСЖКХЕдиныйЛицевойСчет КАК ЕдиныйЛицевойСчет,
		|	КУ_ЛицевыеСчета.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
		|	КУ_ЖилыеЗдания.КодДомаПоФИАС КАК КодДомаПоФИАС,
		|	ВЫРАЗИТЬ(КУ_ЖилыеЗдания.Адрес КАК СТРОКА(1000)) КАК Адрес,
		|	КУ_ПомещенияЖилогоДома.НомерКвартиры КАК НомерКвартиры,
		|	ТаблицаИтоговойЗадолженности.Задолженность КАК Задолженность,
		|	ТаблицаПоказателей.ТипПоказателя КАК ТипПоказателя,
		|	ТаблицаПоказателей.СсылкаПоказателя КАК СсылкаПоказателя,
		|	ТаблицаПоказателей.КодПоказателя КАК КодПоказателя,
		|	ТаблицаПоказателей.НаименованиеПоказателя КАК НаименованиеПоказателя,
		|	ТаблицаПоказателей.ЗначениеПоказателя КАК ЗначениеПоказателя
		|ИЗ
		|	ТаблицаИтоговойЗадолженности КАК ТаблицаИтоговойЗадолженности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ЛицевыеСчета КАК КУ_ЛицевыеСчета
		|		ПО ТаблицаИтоговойЗадолженности.ЛицевойСчет = КУ_ЛицевыеСчета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ПомещенияЖилогоДома КАК КУ_ПомещенияЖилогоДома
		|		ПО (КУ_ЛицевыеСчета.Помещение = КУ_ПомещенияЖилогоДома.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ЖилыеЗдания КАК КУ_ЖилыеЗдания
		|		ПО (КУ_ЛицевыеСчета.Здание = КУ_ЖилыеЗдания.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоказателей КАК ТаблицаПоказателей
		|		ПО (КУ_ЛицевыеСчета.Помещение = ТаблицаПоказателей.Помещение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛицевойСчет,
		|	ТаблицаПоказателей.Порядок
		|ИТОГИ
		|	МАКСИМУМ(КодДомаПоФИАС),
		|	МАКСИМУМ(Адрес),
		|	МАКСИМУМ(НомерКвартиры),
		|	МАКСИМУМ(Задолженность)
		|ПО
		|	ЛицевойСчет";
	
	Если ЗначениеЗаполнено(Здание) Тогда
		Запрос.УстановитьПараметр("Здание", Здание);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КУ_ЛицевыеСчета.Здание В ИЕРАРХИИ(&Здание)", "");
	КонецЕсли;
	
	ГраницаОстатков = Новый Граница(КонецДня(ДатаРеестра), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаСервере
Процедура СохранитьТекстВФайл(ПолучаемыеФайлы, СохраняемыйТекст, ИмяФайла)
	
	ПотокПамяти = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(ПотокПамяти, "windows-1251");
	ЗаписьДанных.ЗаписатьСимволы(СохраняемыйТекст);
	ЗаписьДанных.Закрыть();
	
	ДвоичныеДанные = ПотокПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайлаВХранилище);
	ПолучаемыеФайлы.Добавить(ОписаниеПередаваемогоФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеПолученияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Для Каждого Файл Из ПолученныеФайлы Цикл
		УдалитьИзВременногоХранилища(Файл.Хранение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти