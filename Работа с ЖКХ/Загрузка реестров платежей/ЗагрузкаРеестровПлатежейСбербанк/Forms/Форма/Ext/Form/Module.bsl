#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Заголовок", НСтр("ru = 'Выберите файл'"));
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файл загрузки|*.txt;*.y??'"));
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(ЭтотОбъект, "ИмяФайлаЗагрузки", СтандартнаяОбработка, НастройкиДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПроверитьСуществованиеФайла() Тогда
		ЗапуститьПриложение(ИмяФайлаЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗагрузки

&НаКлиенте
Процедура ТаблицаЗагрузкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьРеестр(Команда)
	
	Если Не ПроверитьСуществованиеФайла() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокФайлаЗагрузки = Новый Массив;
	ЧтениеТекстаЗагрузки = Новый ЧтениеТекста(ИмяФайлаЗагрузки, КодировкаТекста.ANSI);
	
	Пока Истина Цикл
		ПрочитаннаяСтрока = ЧтениеТекстаЗагрузки.ПрочитатьСтроку();
		
		Если ПрочитаннаяСтрока = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		МассивСтрокФайлаЗагрузки.Добавить(ПрочитаннаяСтрока);
	КонецЦикла;
	
	ЗаполнитьТаблицу(МассивСтрокФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	СоздатьДокументыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицыЗагрузки Из Объект.ТаблицаЗагрузки Цикл
		СтрокаТаблицыЗагрузки.Загружать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицыЗагрузки Из Объект.ТаблицаЗагрузки Цикл
		СтрокаТаблицыЗагрузки.Загружать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуЗагрузки(Команда)
	
	Для Каждого СтрокаТаблицыЗагрузки Из Объект.ТаблицаЗагрузки Цикл
		ДатаЗагрузки = СтрокаТаблицыЗагрузки.ДатаЗагрузки;
		КоличествоСекундВремени = ДатаЗагрузки - НачалоДня(ДатаЗагрузки);
		ДатаЗагрузки = ДатаНовая + КоличествоСекундВремени;
		СтрокаТаблицыЗагрузки.ДатаЗагрузки = ДатаЗагрузки;
	КонецЦикла;
	
	ЗагрузитьЛицевыеСчета();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьСуществованиеФайла()
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = НСтр("ru = 'Не указано имя файла загрузки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ИмяФайлаЗагрузки");
		Возврат Ложь;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаЗагрузки);
	Если Не Файл.Существует() Тогда
		ТекстОшибки = НСтр("ru = 'Указанный файл загрузки не существует!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "ИмяФайлаЗагрузки");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьДатуЗагрузки(Дата, Время)
	
	Дата = СтрЗаменить(Дата, "-", ".");
	Время = СтрЗаменить(Время, "-", ":");
	ДатаСтрокой = Дата + " " + Время;
	
	ОписаниеТипаДата  = Новый ОписаниеТипов("Дата");
	ДатаЗагрузки = ОписаниеТипаДата.ПривестиЗначение(ДатаСтрокой);
	
	Возврат ДатаЗагрузки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицу(МассивСтрокФайлаЗагрузки)
	
	Объект.ТаблицаЗагрузки.Очистить();
	ВерхняяГраницаМассиваЗагрузки = МассивСтрокФайлаЗагрузки.ВГраница();
	
	Если ВерхняяГраницаМассиваЗагрузки = -1 Тогда
		ТекстСообщения = НСтр("ru = 'Файл загрузки пустой!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Получим структуру настроек файла загрузки
	СтруктураНастроекФайлаЗагрузки = Новый Структура;
	СтруктураНастроекФайлаЗагрузки.Вставить("Дата", 0);
	СтруктураНастроекФайлаЗагрузки.Вставить("Время", 1);
	СтруктураНастроекФайлаЗагрузки.Вставить("НомерЛС", 5);
	СтруктураНастроекФайлаЗагрузки.Вставить("ФИО", 6);
	СтруктураНастроекФайлаЗагрузки.Вставить("Комментарий", 7);
	СтруктураНастроекФайлаЗагрузки.Вставить("Сумма", 9);
	
	Для ИндексЗагружаемойСтроки = 0 По ВерхняяГраницаМассиваЗагрузки Цикл
		ЗагружаемаяСтрока = МассивСтрокФайлаЗагрузки.Получить(ИндексЗагружаемойСтроки);
		МассивЗагружаемойСтроки = ПолучитьМассивСтроки(ЗагружаемаяСтрока);
		
		Если МассивЗагружаемойСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ТаблицаЗагрузки.Добавить();
		НоваяСтрока.Загружать = Истина;
		
		Для Каждого НастройкаЗагрузки Из СтруктураНастроекФайлаЗагрузки Цикл
			НоваяСтрока[НастройкаЗагрузки.Ключ] = МассивЗагружаемойСтроки[НастройкаЗагрузки.Значение];
		КонецЦикла;
		
		ДатаЗагрузки = ПолучитьДатуЗагрузки(НоваяСтрока.Дата, НоваяСтрока.Время);
		НоваяСтрока.ДатаЗагрузки = ДатаЗагрузки;
	КонецЦикла;
	
	ЗагрузитьЛицевыеСчета();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтроки(ЗагружаемаяСтрока)
	
	Если ПустаяСтрока(ЗагружаемаяСтрока) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделительПолей = ";";
	МассивЗагружаемойСтроки = СтрРазделить(ЗагружаемаяСтрока, РазделительПолей, Истина);
	
	ТребуемоеКоличествоЗначенийВСтроке = 12;
	ТекущееКоличествоЗначенийВСтроке = МассивЗагружаемойСтроки.Количество();
	
	Если ТекущееКоличествоЗначенийВСтроке < ТребуемоеКоличествоЗначенийВСтроке Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущееКоличествоЗначенийВСтроке = ТребуемоеКоличествоЗначенийВСтроке Тогда
		Возврат МассивЗагружаемойСтроки;
	КонецЕсли;
	
	Возврат МассивЗагружаемойСтроки;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьЛицевыеСчета()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаЗагрузки.НомерСтроки КАК НомерСтроки,
		|	ТаблицаЗагрузки.Загружать КАК Загружать,
		|	ТаблицаЗагрузки.ДатаЗагрузки КАК ДатаЗагрузки,
		|	ТаблицаЗагрузки.НомерЛС КАК НомерЛС,
		|	ТаблицаЗагрузки.ФИО КАК ФИО,
		|	ТаблицаЗагрузки.Комментарий КАК Комментарий,
		|	ТаблицаЗагрузки.Сумма КАК Сумма
		|ПОМЕСТИТЬ ТаблицаЗагрузки
		|ИЗ
		|	&ТаблицаЗагрузки КАК ТаблицаЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблица.Загружать КАК Загружать,
		|	ВременнаяТаблица.ДатаЗагрузки КАК ДатаЗагрузки,
		|	НАЧАЛОПЕРИОДА(ВременнаяТаблица.ДатаЗагрузки, ДЕНЬ) КАК ДатаЗагрузкиНачало,
		|	КОНЕЦПЕРИОДА(ВременнаяТаблица.ДатаЗагрузки, ДЕНЬ) КАК ДатаЗагрузкиКонец,
		|	ВременнаяТаблица.НомерЛС КАК НомерЛС,
		|	ВременнаяТаблица.ФИО КАК ФИО,
		|	ВременнаяТаблица.Комментарий КАК Комментарий,
		|	МАКСИМУМ(ВременнаяТаблица.ЛицевойСчет) КАК ЛицевойСчет,
		|	ВременнаяТаблица.Контрагент КАК Контрагент,
		|	ВременнаяТаблица.Сумма КАК Сумма
		|ПОМЕСТИТЬ ТаблицаЛицевыхСчетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ТаблицаЗагрузки.НомерСтроки) КАК НомерСтроки,
		|		МАКСИМУМ(ТаблицаЗагрузки.Загружать) КАК Загружать,
		|		МАКСИМУМ(ТаблицаЗагрузки.ДатаЗагрузки) КАК ДатаЗагрузки,
		|		ТаблицаЗагрузки.НомерЛС КАК НомерЛС,
		|		ТаблицаЗагрузки.ФИО КАК ФИО,
		|		ТаблицаЗагрузки.Комментарий КАК Комментарий,
		|		ЕСТЬNULL(КУ_ЛицевыеСчета.Ссылка, ЗНАЧЕНИЕ(Справочник.КУ_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
		|		ЕСТЬNULL(КУ_ЛицевыеСчета.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
		|		СУММА(ТаблицаЗагрузки.Сумма) КАК Сумма
		|	ИЗ
		|		ТаблицаЗагрузки КАК ТаблицаЗагрузки
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КУ_ЛицевыеСчета КАК КУ_ЛицевыеСчета
		|			ПО ТаблицаЗагрузки.НомерЛС = КУ_ЛицевыеСчета.НомерЛицевогоСчета
		|				И (НЕ КУ_ЛицевыеСчета.ПометкаУдаления)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаЗагрузки.ФИО,
		|		ТаблицаЗагрузки.Комментарий,
		|		ТаблицаЗагрузки.НомерЛС,
		|		ЕСТЬNULL(КУ_ЛицевыеСчета.Ссылка, ЗНАЧЕНИЕ(Справочник.КУ_ЛицевыеСчета.ПустаяСсылка)),
		|		ЕСТЬNULL(КУ_ЛицевыеСчета.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))) КАК ВременнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.НомерСтроки,
		|	ВременнаяТаблица.Загружать,
		|	ВременнаяТаблица.ДатаЗагрузки,
		|	ВременнаяТаблица.НомерЛС,
		|	ВременнаяТаблица.ФИО,
		|	ВременнаяТаблица.Комментарий,
		|	ВременнаяТаблица.Контрагент,
		|	ВременнаяТаблица.Сумма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЛицевыхСчетов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаЛицевыхСчетов.Загружать КАК Загружать,
		|	ТаблицаЛицевыхСчетов.ДатаЗагрузки КАК ДатаЗагрузки,
		|	ТаблицаЛицевыхСчетов.НомерЛС КАК НомерЛС,
		|	ТаблицаЛицевыхСчетов.ФИО КАК ФИО,
		|	ТаблицаЛицевыхСчетов.Комментарий КАК Комментарий,
		|	ТаблицаЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаЛицевыхСчетов.Контрагент КАК Контрагент,
		|	ТаблицаЛицевыхСчетов.Сумма КАК Сумма,
		|	МАКСИМУМ(ПоступлениеНаРасчетныйСчет.Ссылка) КАК ДокументЗагрузки
		|ИЗ
		|	ТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|		ПО ТаблицаЛицевыхСчетов.ЛицевойСчет = ПоступлениеНаРасчетныйСчет.КУ_ЛицевойСчет
		|			И ТаблицаЛицевыхСчетов.Сумма = ПоступлениеНаРасчетныйСчет.СуммаДокумента
		|			И (ПоступлениеНаРасчетныйСчет.Организация = &Организация)
		|			И (ПоступлениеНаРасчетныйСчет.СчетОрганизации = &СчетОрганизации)
		|			И (ПоступлениеНаРасчетныйСчет.Дата МЕЖДУ ТаблицаЛицевыхСчетов.ДатаЗагрузкиНачало И ТаблицаЛицевыхСчетов.ДатаЗагрузкиКонец)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЛицевыхСчетов.НомерСтроки,
		|	ТаблицаЛицевыхСчетов.Загружать,
		|	ТаблицаЛицевыхСчетов.ДатаЗагрузки,
		|	ТаблицаЛицевыхСчетов.НомерЛС,
		|	ТаблицаЛицевыхСчетов.ФИО,
		|	ТаблицаЛицевыхСчетов.Комментарий,
		|	ТаблицаЛицевыхСчетов.ЛицевойСчет,
		|	ТаблицаЛицевыхСчетов.Контрагент,
		|	ТаблицаЛицевыхСчетов.Сумма
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаЛицевыхСчетов.НомерСтроки";
	
	ТаблицаЗагрузки = Объект.ТаблицаЗагрузки.Выгрузить();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаЗагрузки", ТаблицаЗагрузки);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СчетОрганизации", Объект.БанковскийСчет);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Объект.ТаблицаЗагрузки.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговор(Контрагент, Организация, ВалютаДокумента)
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Приоритет,
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|	ДоговорыКонтрагентов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ПОДСТРОКА(ДоговорыКонтрагентов.Наименование, 1, 3) В (""Дог"", ""УМД"")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	2,
		|	ДоговорыКонтрагентов.Ссылка,
		|	ДоговорыКонтрагентов.Наименование
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	ЗапросКонтрагента = Новый Запрос(ТекстЗапроса);
	ЗапросКонтрагента.УстановитьПараметр("Контрагент", Контрагент);
	ЗапросКонтрагента.УстановитьПараметр("Организация", Организация);
	ЗапросКонтрагента.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	Выборка = ЗапросКонтрагента.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	ДоговорОбъект.Организация = Организация;
	ДоговорОбъект.Владелец = Контрагент;
	ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ДоговорОбъект.Наименование = "Договор основной";
	ДоговорОбъект.ВалютаВзаиморасчетов = ВалютаДокумента;
	ДоговорОбъект.Записать();
	
	Возврат ДоговорОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	// Получим настройки необходимые для создания документов поступления на РС
	СтруктураНастроек = Справочники.сакс_НастройкиЗаполнения.ПолучитьДанныеНастройки("ЗагрузкаРеестровПлатежейСбербанк");
	СвойствоДокументВыгружаетсяВУХ = СтруктураНастроек.СвойствоДокументВыгружаетсяВУХ;
	СчетУчетаРасчетовСКонтрагентом = СтруктураНастроек.СчетУчетаРасчетовСКонтрагентом;
	СчетУчетаРасчетовПоАвансам = СтруктураНастроек.СчетУчетаРасчетовПоАвансам;
	СтавкаНДС = СтруктураНастроек.СтавкаНДС;
	
	Организация = Объект.Организация;
	ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателя;
	ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	СубконтоКт1 = Справочники.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков;
	СчетРасчетныеСчета = ПланыСчетов.Хозрасчетный.РасчетныеСчета; // 51
	СчетПрочиеРасходы = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
	СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходУСН;
	
	Для Каждого Стр Из Объект.ТаблицаЗагрузки Цикл
		
		Если Стр.Загружать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ЛицевойСчет = Стр.ЛицевойСчет;
		Если Не ЗначениеЗаполнено(ЛицевойСчет) Тогда
			ШаблонОшибки = НСтр("ru = 'В строке № %1 не указан лицевой счет! Данная строка загружена не будет'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Стр.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Контрагент = Стр.Контрагент;
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			ШаблонОшибки = НСтр("ru = 'В строке № %1 не указан контрагент! Данная строка загружена не будет'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Стр.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.ДокументЗагрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		Дата = Стр.ДатаЗагрузки;
		СуммаДокумента = Стр.Сумма;
		
		ДокументПП = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
		ДокументПП.Организация = Организация;
		ДокументПП.Дата = Дата;
		ДокументПП.СуммаДокумента = СуммаДокумента;
		ДокументПП.НазначениеПлатежа = Стр.Комментарий;
		ДокументПП.ДатаВходящегоДокумента = Дата;
		ДокументПП.ВидОперации = ВидОперации;
		ДокументПП.СчетОрганизации = Объект.БанковскийСчет;
		ДокументПП.Контрагент = Контрагент;
		ДокументПП.СчетБанк = СчетРасчетныеСчета;
		ДокументПП.СчетУчетаРасчетовСКонтрагентом = СчетПрочиеРасходы;
		ДокументПП.СубконтоКт1 = СубконтоКт1;
		ДокументПП.ВалютаДокумента = ВалютаДокумента;
		ДокументПП.Комментарий = Стр.НомерЛС;
		ДокументПП.КУ_ЛицевойСчет = ЛицевойСчет;
		
		Договор = КУ_ИнтерфейсСерверПовИсп.ПолучитьДоговорКонтрагента(Организация, ЛицевойСчет, Неопределено);
		Если Не ЗначениеЗаполнено(Договор) Тогда
			Договор = ПолучитьДоговор(ДокументПП.Контрагент, Организация, ВалютаДокумента);
		КонецЕсли;
		
		СтрокаРасшифровкиПлатежа = ДокументПП.РасшифровкаПлатежа.Добавить();
		СтрокаРасшифровкиПлатежа.СтавкаНДС = СтавкаНДС;
		СтрокаРасшифровкиПлатежа.СуммаПлатежа = СуммаДокумента;
		СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СуммаДокумента;
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		СтрокаРасшифровкиПлатежа.ДоговорКонтрагента = Договор;
		СтрокаРасшифровкиПлатежа.СпособПогашенияЗадолженности = СпособПогашенияЗадолженности;
		СтрокаРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		СтрокаРасшифровкиПлатежа.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовПоАвансам;
		СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов = 1;
		СтрокаРасшифровкиПлатежа.ПорядокОтраженияАванса = ПорядокОтраженияАванса;
		
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаРасшифровкиПлатежа);
		ДокументПП.КУ_ЗаполнитьЗадолженность(Истина, Неопределено, ЛицевойСчет);
		ДокументПП.КУ_РаспределитьСуммуОплаты(Ложь);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		МассивПустыхСтрок = ДокументПП.КУ_ВидыНачислений.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаМассива Из МассивПустыхСтрок Цикл
			СтрокаМассива.ДоговорКонтрагента = Договор;
		КонецЦикла;
		
		ДокументПП.Записать();
		
		ШаблонСообщения = НСтр("ru = 'Создан документ: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументПП);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если ЗначениеЗаполнено(СвойствоДокументВыгружаетсяВУХ) Тогда
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ДокументПП.Ссылка;
			МенеджерЗаписи.Свойство = СвойствоДокументВыгружаетсяВУХ;
			МенеджерЗаписи.Значение = Истина;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
